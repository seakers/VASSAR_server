/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package seakers.engineerserver.thriftinterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-07-27")
public class MissionMeasurements implements org.apache.thrift.TBase<MissionMeasurements, MissionMeasurements._Fields>, java.io.Serializable, Cloneable, Comparable<MissionMeasurements> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MissionMeasurements");

  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField START_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("start_year", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField END_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("end_year", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PANEL_SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("panelScores", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MissionMeasurementsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MissionMeasurementsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names; // required
  public int start_year; // required
  public int end_year; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> panelScores; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAMES((short)1, "names"),
    START_YEAR((short)2, "start_year"),
    END_YEAR((short)3, "end_year"),
    PANEL_SCORES((short)4, "panelScores");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAMES
          return NAMES;
        case 2: // START_YEAR
          return START_YEAR;
        case 3: // END_YEAR
          return END_YEAR;
        case 4: // PANEL_SCORES
          return PANEL_SCORES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_YEAR_ISSET_ID = 0;
  private static final int __END_YEAR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_YEAR, new org.apache.thrift.meta_data.FieldMetaData("start_year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.END_YEAR, new org.apache.thrift.meta_data.FieldMetaData("end_year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PANEL_SCORES, new org.apache.thrift.meta_data.FieldMetaData("panelScores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MissionMeasurements.class, metaDataMap);
  }

  public MissionMeasurements() {
  }

  public MissionMeasurements(
    java.util.List<java.lang.String> names,
    int start_year,
    int end_year,
    java.util.List<java.lang.Double> panelScores)
  {
    this();
    this.names = names;
    this.start_year = start_year;
    setStart_yearIsSet(true);
    this.end_year = end_year;
    setEnd_yearIsSet(true);
    this.panelScores = panelScores;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MissionMeasurements(MissionMeasurements other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNames()) {
      java.util.List<java.lang.String> __this__names = new java.util.ArrayList<java.lang.String>(other.names);
      this.names = __this__names;
    }
    this.start_year = other.start_year;
    this.end_year = other.end_year;
    if (other.isSetPanelScores()) {
      java.util.List<java.lang.Double> __this__panelScores = new java.util.ArrayList<java.lang.Double>(other.panelScores);
      this.panelScores = __this__panelScores;
    }
  }

  public MissionMeasurements deepCopy() {
    return new MissionMeasurements(this);
  }

  @Override
  public void clear() {
    this.names = null;
    setStart_yearIsSet(false);
    this.start_year = 0;
    setEnd_yearIsSet(false);
    this.end_year = 0;
    this.panelScores = null;
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(java.lang.String elem) {
    if (this.names == null) {
      this.names = new java.util.ArrayList<java.lang.String>();
    }
    this.names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getNames() {
    return this.names;
  }

  public MissionMeasurements setNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public int getStart_year() {
    return this.start_year;
  }

  public MissionMeasurements setStart_year(int start_year) {
    this.start_year = start_year;
    setStart_yearIsSet(true);
    return this;
  }

  public void unsetStart_year() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_YEAR_ISSET_ID);
  }

  /** Returns true if field start_year is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_year() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_YEAR_ISSET_ID);
  }

  public void setStart_yearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_YEAR_ISSET_ID, value);
  }

  public int getEnd_year() {
    return this.end_year;
  }

  public MissionMeasurements setEnd_year(int end_year) {
    this.end_year = end_year;
    setEnd_yearIsSet(true);
    return this;
  }

  public void unsetEnd_year() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __END_YEAR_ISSET_ID);
  }

  /** Returns true if field end_year is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_year() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __END_YEAR_ISSET_ID);
  }

  public void setEnd_yearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __END_YEAR_ISSET_ID, value);
  }

  public int getPanelScoresSize() {
    return (this.panelScores == null) ? 0 : this.panelScores.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getPanelScoresIterator() {
    return (this.panelScores == null) ? null : this.panelScores.iterator();
  }

  public void addToPanelScores(double elem) {
    if (this.panelScores == null) {
      this.panelScores = new java.util.ArrayList<java.lang.Double>();
    }
    this.panelScores.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getPanelScores() {
    return this.panelScores;
  }

  public MissionMeasurements setPanelScores(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> panelScores) {
    this.panelScores = panelScores;
    return this;
  }

  public void unsetPanelScores() {
    this.panelScores = null;
  }

  /** Returns true if field panelScores is set (has been assigned a value) and false otherwise */
  public boolean isSetPanelScores() {
    return this.panelScores != null;
  }

  public void setPanelScoresIsSet(boolean value) {
    if (!value) {
      this.panelScores = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((java.util.List<java.lang.String>)value);
      }
      break;

    case START_YEAR:
      if (value == null) {
        unsetStart_year();
      } else {
        setStart_year((java.lang.Integer)value);
      }
      break;

    case END_YEAR:
      if (value == null) {
        unsetEnd_year();
      } else {
        setEnd_year((java.lang.Integer)value);
      }
      break;

    case PANEL_SCORES:
      if (value == null) {
        unsetPanelScores();
      } else {
        setPanelScores((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAMES:
      return getNames();

    case START_YEAR:
      return getStart_year();

    case END_YEAR:
      return getEnd_year();

    case PANEL_SCORES:
      return getPanelScores();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAMES:
      return isSetNames();
    case START_YEAR:
      return isSetStart_year();
    case END_YEAR:
      return isSetEnd_year();
    case PANEL_SCORES:
      return isSetPanelScores();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MissionMeasurements)
      return this.equals((MissionMeasurements)that);
    return false;
  }

  public boolean equals(MissionMeasurements that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_start_year = true;
    boolean that_present_start_year = true;
    if (this_present_start_year || that_present_start_year) {
      if (!(this_present_start_year && that_present_start_year))
        return false;
      if (this.start_year != that.start_year)
        return false;
    }

    boolean this_present_end_year = true;
    boolean that_present_end_year = true;
    if (this_present_end_year || that_present_end_year) {
      if (!(this_present_end_year && that_present_end_year))
        return false;
      if (this.end_year != that.end_year)
        return false;
    }

    boolean this_present_panelScores = true && this.isSetPanelScores();
    boolean that_present_panelScores = true && that.isSetPanelScores();
    if (this_present_panelScores || that_present_panelScores) {
      if (!(this_present_panelScores && that_present_panelScores))
        return false;
      if (!this.panelScores.equals(that.panelScores))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNames()) ? 131071 : 524287);
    if (isSetNames())
      hashCode = hashCode * 8191 + names.hashCode();

    hashCode = hashCode * 8191 + start_year;

    hashCode = hashCode * 8191 + end_year;

    hashCode = hashCode * 8191 + ((isSetPanelScores()) ? 131071 : 524287);
    if (isSetPanelScores())
      hashCode = hashCode * 8191 + panelScores.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MissionMeasurements other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNames()).compareTo(other.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, other.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_year()).compareTo(other.isSetStart_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_year, other.start_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnd_year()).compareTo(other.isSetEnd_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_year, other.end_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPanelScores()).compareTo(other.isSetPanelScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPanelScores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.panelScores, other.panelScores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MissionMeasurements(");
    boolean first = true;

    sb.append("names:");
    if (this.names == null) {
      sb.append("null");
    } else {
      sb.append(this.names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_year:");
    sb.append(this.start_year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_year:");
    sb.append(this.end_year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("panelScores:");
    if (this.panelScores == null) {
      sb.append("null");
    } else {
      sb.append(this.panelScores);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MissionMeasurementsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MissionMeasurementsStandardScheme getScheme() {
      return new MissionMeasurementsStandardScheme();
    }
  }

  private static class MissionMeasurementsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MissionMeasurements> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MissionMeasurements struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.names = new java.util.ArrayList<java.lang.String>(_list150.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = iprot.readString();
                  struct.names.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start_year = iprot.readI32();
              struct.setStart_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.end_year = iprot.readI32();
              struct.setEnd_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PANEL_SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list153 = iprot.readListBegin();
                struct.panelScores = new java.util.ArrayList<java.lang.Double>(_list153.size);
                double _elem154;
                for (int _i155 = 0; _i155 < _list153.size; ++_i155)
                {
                  _elem154 = iprot.readDouble();
                  struct.panelScores.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setPanelScoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MissionMeasurements struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.names != null) {
        oprot.writeFieldBegin(NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
          for (java.lang.String _iter156 : struct.names)
          {
            oprot.writeString(_iter156);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_YEAR_FIELD_DESC);
      oprot.writeI32(struct.start_year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_YEAR_FIELD_DESC);
      oprot.writeI32(struct.end_year);
      oprot.writeFieldEnd();
      if (struct.panelScores != null) {
        oprot.writeFieldBegin(PANEL_SCORES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.panelScores.size()));
          for (double _iter157 : struct.panelScores)
          {
            oprot.writeDouble(_iter157);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MissionMeasurementsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MissionMeasurementsTupleScheme getScheme() {
      return new MissionMeasurementsTupleScheme();
    }
  }

  private static class MissionMeasurementsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MissionMeasurements> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MissionMeasurements struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNames()) {
        optionals.set(0);
      }
      if (struct.isSetStart_year()) {
        optionals.set(1);
      }
      if (struct.isSetEnd_year()) {
        optionals.set(2);
      }
      if (struct.isSetPanelScores()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (java.lang.String _iter158 : struct.names)
          {
            oprot.writeString(_iter158);
          }
        }
      }
      if (struct.isSetStart_year()) {
        oprot.writeI32(struct.start_year);
      }
      if (struct.isSetEnd_year()) {
        oprot.writeI32(struct.end_year);
      }
      if (struct.isSetPanelScores()) {
        {
          oprot.writeI32(struct.panelScores.size());
          for (double _iter159 : struct.panelScores)
          {
            oprot.writeDouble(_iter159);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MissionMeasurements struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list160 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.names = new java.util.ArrayList<java.lang.String>(_list160.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem161;
          for (int _i162 = 0; _i162 < _list160.size; ++_i162)
          {
            _elem161 = iprot.readString();
            struct.names.add(_elem161);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.start_year = iprot.readI32();
        struct.setStart_yearIsSet(true);
      }
      if (incoming.get(2)) {
        struct.end_year = iprot.readI32();
        struct.setEnd_yearIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.panelScores = new java.util.ArrayList<java.lang.Double>(_list163.size);
          double _elem164;
          for (int _i165 = 0; _i165 < _list163.size; ++_i165)
          {
            _elem164 = iprot.readDouble();
            struct.panelScores.add(_elem164);
          }
        }
        struct.setPanelScoresIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

