/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package seakers.engineerserver.thriftinterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class VASSARInterface {

  public interface Iface {

    /**
     * A method definition looks like C code. It has a return type, arguments,
     * and optionally a list of exceptions that it may throw. Note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     */
    public void ping() throws org.apache.thrift.TException;

    public BinaryInputArchitecture evalBinaryInputArch(String problem, java.util.List<Boolean> inputs) throws org.apache.thrift.TException;

    public DiscreteInputArchitecture evalDiscreteInputArch(String problem, java.util.List<Integer> inputs) throws org.apache.thrift.TException;

    public java.util.List<BinaryInputArchitecture> runLocalSearchBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException;

    public java.util.List<DiscreteInputArchitecture> runLocalSearchDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException;

    public java.util.List<String> getOrbitList(String problem) throws org.apache.thrift.TException;

    public java.util.List<String> getInstrumentList(String problem) throws org.apache.thrift.TException;

    public java.util.List<String> getObjectiveList(String problem) throws org.apache.thrift.TException;

    public java.util.List<String> getSubobjectiveList(String problem) throws org.apache.thrift.TException;

    public java.util.List<String> getInstrumentsForObjective(String problem, String objective) throws org.apache.thrift.TException;

    public java.util.List<String> getInstrumentsForPanel(String problem, String panel) throws org.apache.thrift.TException;

    public java.util.List<String> getCritiqueBinaryInputArch(String problem, BinaryInputArchitecture inputs) throws org.apache.thrift.TException;

    public java.util.List<String> getCritiqueDiscreteInputArch(String problem, DiscreteInputArchitecture inputs) throws org.apache.thrift.TException;

    public java.util.List<ObjectiveSatisfaction> getArchitectureScoreExplanation(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException;

    public java.util.List<ObjectiveSatisfaction> getPanelScoreExplanation(String problem, BinaryInputArchitecture arch, String panel) throws org.apache.thrift.TException;

    public java.util.List<ObjectiveSatisfaction> getObjectiveScoreExplanation(String problem, BinaryInputArchitecture arch, String objective) throws org.apache.thrift.TException;

    public boolean isGARunning(String id) throws org.apache.thrift.TException;

    public int stopGA(String id) throws org.apache.thrift.TException;

    public String startGABinaryInput(String problem, java.util.List<BinaryInputArchitecture> dataset, String username) throws org.apache.thrift.TException;

    public String startGADiscreteInput(String problem, java.util.List<DiscreteInputArchitecture> dataset, String username) throws org.apache.thrift.TException;

    public java.util.List<SubscoreInformation> getArchScienceInformationBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException;

    public java.util.List<MissionCostInformation> getArchCostInformationBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException;

    public SubobjectiveDetails getSubscoreDetailsBinaryInput(String problem, BinaryInputArchitecture arch, String subobj) throws org.apache.thrift.TException;

    public java.util.List<SubscoreInformation> getArchScienceInformationDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException;

    public java.util.List<MissionCostInformation> getArchCostInformationDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException;

    public SubobjectiveDetails getSubscoreDetailsDiscreteInput(String problem, DiscreteInputArchitecture arch, String subobj) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void evalBinaryInputArch(String problem, java.util.List<Boolean> inputs, org.apache.thrift.async.AsyncMethodCallback<BinaryInputArchitecture> resultHandler) throws org.apache.thrift.TException;

    public void evalDiscreteInputArch(String problem, java.util.List<Integer> inputs, org.apache.thrift.async.AsyncMethodCallback<DiscreteInputArchitecture> resultHandler) throws org.apache.thrift.TException;

    public void runLocalSearchBinaryInput(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<BinaryInputArchitecture>> resultHandler) throws org.apache.thrift.TException;

    public void runLocalSearchDiscreteInput(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DiscreteInputArchitecture>> resultHandler) throws org.apache.thrift.TException;

    public void getOrbitList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getInstrumentList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getObjectiveList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getSubobjectiveList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getInstrumentsForObjective(String problem, String objective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getInstrumentsForPanel(String problem, String panel, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getCritiqueBinaryInputArch(String problem, BinaryInputArchitecture inputs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getCritiqueDiscreteInputArch(String problem, DiscreteInputArchitecture inputs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException;

    public void getArchitectureScoreExplanation(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException;

    public void getPanelScoreExplanation(String problem, BinaryInputArchitecture arch, String panel, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException;

    public void getObjectiveScoreExplanation(String problem, BinaryInputArchitecture arch, String objective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException;

    public void isGARunning(String id, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void stopGA(String id, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException;

    public void startGABinaryInput(String problem, java.util.List<BinaryInputArchitecture> dataset, String username, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void startGADiscreteInput(String problem, java.util.List<DiscreteInputArchitecture> dataset, String username, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void getArchScienceInformationBinaryInput(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler) throws org.apache.thrift.TException;

    public void getArchCostInformationBinaryInput(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler) throws org.apache.thrift.TException;

    public void getSubscoreDetailsBinaryInput(String problem, BinaryInputArchitecture arch, String subobj, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler) throws org.apache.thrift.TException;

    public void getArchScienceInformationDiscreteInput(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler) throws org.apache.thrift.TException;

    public void getArchCostInformationDiscreteInput(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler) throws org.apache.thrift.TException;

    public void getSubscoreDetailsDiscreteInput(String problem, DiscreteInputArchitecture arch, String subobj, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public BinaryInputArchitecture evalBinaryInputArch(String problem, java.util.List<Boolean> inputs) throws org.apache.thrift.TException
    {
      send_evalBinaryInputArch(problem, inputs);
      return recv_evalBinaryInputArch();
    }

    public void send_evalBinaryInputArch(String problem, java.util.List<Boolean> inputs) throws org.apache.thrift.TException
    {
      evalBinaryInputArch_args args = new evalBinaryInputArch_args();
      args.setProblem(problem);
      args.setInputs(inputs);
      sendBase("evalBinaryInputArch", args);
    }

    public BinaryInputArchitecture recv_evalBinaryInputArch() throws org.apache.thrift.TException
    {
      evalBinaryInputArch_result result = new evalBinaryInputArch_result();
      receiveBase(result, "evalBinaryInputArch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evalBinaryInputArch failed: unknown result");
    }

    public DiscreteInputArchitecture evalDiscreteInputArch(String problem, java.util.List<Integer> inputs) throws org.apache.thrift.TException
    {
      send_evalDiscreteInputArch(problem, inputs);
      return recv_evalDiscreteInputArch();
    }

    public void send_evalDiscreteInputArch(String problem, java.util.List<Integer> inputs) throws org.apache.thrift.TException
    {
      evalDiscreteInputArch_args args = new evalDiscreteInputArch_args();
      args.setProblem(problem);
      args.setInputs(inputs);
      sendBase("evalDiscreteInputArch", args);
    }

    public DiscreteInputArchitecture recv_evalDiscreteInputArch() throws org.apache.thrift.TException
    {
      evalDiscreteInputArch_result result = new evalDiscreteInputArch_result();
      receiveBase(result, "evalDiscreteInputArch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evalDiscreteInputArch failed: unknown result");
    }

    public java.util.List<BinaryInputArchitecture> runLocalSearchBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_runLocalSearchBinaryInput(problem, arch);
      return recv_runLocalSearchBinaryInput();
    }

    public void send_runLocalSearchBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      runLocalSearchBinaryInput_args args = new runLocalSearchBinaryInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("runLocalSearchBinaryInput", args);
    }

    public java.util.List<BinaryInputArchitecture> recv_runLocalSearchBinaryInput() throws org.apache.thrift.TException
    {
      runLocalSearchBinaryInput_result result = new runLocalSearchBinaryInput_result();
      receiveBase(result, "runLocalSearchBinaryInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runLocalSearchBinaryInput failed: unknown result");
    }

    public java.util.List<DiscreteInputArchitecture> runLocalSearchDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_runLocalSearchDiscreteInput(problem, arch);
      return recv_runLocalSearchDiscreteInput();
    }

    public void send_runLocalSearchDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException
    {
      runLocalSearchDiscreteInput_args args = new runLocalSearchDiscreteInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("runLocalSearchDiscreteInput", args);
    }

    public java.util.List<DiscreteInputArchitecture> recv_runLocalSearchDiscreteInput() throws org.apache.thrift.TException
    {
      runLocalSearchDiscreteInput_result result = new runLocalSearchDiscreteInput_result();
      receiveBase(result, "runLocalSearchDiscreteInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runLocalSearchDiscreteInput failed: unknown result");
    }

    public java.util.List<String> getOrbitList(String problem) throws org.apache.thrift.TException
    {
      send_getOrbitList(problem);
      return recv_getOrbitList();
    }

    public void send_getOrbitList(String problem) throws org.apache.thrift.TException
    {
      getOrbitList_args args = new getOrbitList_args();
      args.setProblem(problem);
      sendBase("getOrbitList", args);
    }

    public java.util.List<String> recv_getOrbitList() throws org.apache.thrift.TException
    {
      getOrbitList_result result = new getOrbitList_result();
      receiveBase(result, "getOrbitList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrbitList failed: unknown result");
    }

    public java.util.List<String> getInstrumentList(String problem) throws org.apache.thrift.TException
    {
      send_getInstrumentList(problem);
      return recv_getInstrumentList();
    }

    public void send_getInstrumentList(String problem) throws org.apache.thrift.TException
    {
      getInstrumentList_args args = new getInstrumentList_args();
      args.setProblem(problem);
      sendBase("getInstrumentList", args);
    }

    public java.util.List<String> recv_getInstrumentList() throws org.apache.thrift.TException
    {
      getInstrumentList_result result = new getInstrumentList_result();
      receiveBase(result, "getInstrumentList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInstrumentList failed: unknown result");
    }

    public java.util.List<String> getObjectiveList(String problem) throws org.apache.thrift.TException
    {
      send_getObjectiveList(problem);
      return recv_getObjectiveList();
    }

    public void send_getObjectiveList(String problem) throws org.apache.thrift.TException
    {
      getObjectiveList_args args = new getObjectiveList_args();
      args.setProblem(problem);
      sendBase("getObjectiveList", args);
    }

    public java.util.List<String> recv_getObjectiveList() throws org.apache.thrift.TException
    {
      getObjectiveList_result result = new getObjectiveList_result();
      receiveBase(result, "getObjectiveList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getObjectiveList failed: unknown result");
    }

    public java.util.List<String> getSubobjectiveList(String problem) throws org.apache.thrift.TException
    {
      send_getSubobjectiveList(problem);
      return recv_getSubobjectiveList();
    }

    public void send_getSubobjectiveList(String problem) throws org.apache.thrift.TException
    {
      getSubobjectiveList_args args = new getSubobjectiveList_args();
      args.setProblem(problem);
      sendBase("getSubobjectiveList", args);
    }

    public java.util.List<String> recv_getSubobjectiveList() throws org.apache.thrift.TException
    {
      getSubobjectiveList_result result = new getSubobjectiveList_result();
      receiveBase(result, "getSubobjectiveList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubobjectiveList failed: unknown result");
    }

    public java.util.List<String> getInstrumentsForObjective(String problem, String objective) throws org.apache.thrift.TException
    {
      send_getInstrumentsForObjective(problem, objective);
      return recv_getInstrumentsForObjective();
    }

    public void send_getInstrumentsForObjective(String problem, String objective) throws org.apache.thrift.TException
    {
      getInstrumentsForObjective_args args = new getInstrumentsForObjective_args();
      args.setProblem(problem);
      args.setObjective(objective);
      sendBase("getInstrumentsForObjective", args);
    }

    public java.util.List<String> recv_getInstrumentsForObjective() throws org.apache.thrift.TException
    {
      getInstrumentsForObjective_result result = new getInstrumentsForObjective_result();
      receiveBase(result, "getInstrumentsForObjective");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInstrumentsForObjective failed: unknown result");
    }

    public java.util.List<String> getInstrumentsForPanel(String problem, String panel) throws org.apache.thrift.TException
    {
      send_getInstrumentsForPanel(problem, panel);
      return recv_getInstrumentsForPanel();
    }

    public void send_getInstrumentsForPanel(String problem, String panel) throws org.apache.thrift.TException
    {
      getInstrumentsForPanel_args args = new getInstrumentsForPanel_args();
      args.setProblem(problem);
      args.setPanel(panel);
      sendBase("getInstrumentsForPanel", args);
    }

    public java.util.List<String> recv_getInstrumentsForPanel() throws org.apache.thrift.TException
    {
      getInstrumentsForPanel_result result = new getInstrumentsForPanel_result();
      receiveBase(result, "getInstrumentsForPanel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInstrumentsForPanel failed: unknown result");
    }

    public java.util.List<String> getCritiqueBinaryInputArch(String problem, BinaryInputArchitecture inputs) throws org.apache.thrift.TException
    {
      send_getCritiqueBinaryInputArch(problem, inputs);
      return recv_getCritiqueBinaryInputArch();
    }

    public void send_getCritiqueBinaryInputArch(String problem, BinaryInputArchitecture inputs) throws org.apache.thrift.TException
    {
      getCritiqueBinaryInputArch_args args = new getCritiqueBinaryInputArch_args();
      args.setProblem(problem);
      args.setInputs(inputs);
      sendBase("getCritiqueBinaryInputArch", args);
    }

    public java.util.List<String> recv_getCritiqueBinaryInputArch() throws org.apache.thrift.TException
    {
      getCritiqueBinaryInputArch_result result = new getCritiqueBinaryInputArch_result();
      receiveBase(result, "getCritiqueBinaryInputArch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCritiqueBinaryInputArch failed: unknown result");
    }

    public java.util.List<String> getCritiqueDiscreteInputArch(String problem, DiscreteInputArchitecture inputs) throws org.apache.thrift.TException
    {
      send_getCritiqueDiscreteInputArch(problem, inputs);
      return recv_getCritiqueDiscreteInputArch();
    }

    public void send_getCritiqueDiscreteInputArch(String problem, DiscreteInputArchitecture inputs) throws org.apache.thrift.TException
    {
      getCritiqueDiscreteInputArch_args args = new getCritiqueDiscreteInputArch_args();
      args.setProblem(problem);
      args.setInputs(inputs);
      sendBase("getCritiqueDiscreteInputArch", args);
    }

    public java.util.List<String> recv_getCritiqueDiscreteInputArch() throws org.apache.thrift.TException
    {
      getCritiqueDiscreteInputArch_result result = new getCritiqueDiscreteInputArch_result();
      receiveBase(result, "getCritiqueDiscreteInputArch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCritiqueDiscreteInputArch failed: unknown result");
    }

    public java.util.List<ObjectiveSatisfaction> getArchitectureScoreExplanation(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_getArchitectureScoreExplanation(problem, arch);
      return recv_getArchitectureScoreExplanation();
    }

    public void send_getArchitectureScoreExplanation(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      getArchitectureScoreExplanation_args args = new getArchitectureScoreExplanation_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("getArchitectureScoreExplanation", args);
    }

    public java.util.List<ObjectiveSatisfaction> recv_getArchitectureScoreExplanation() throws org.apache.thrift.TException
    {
      getArchitectureScoreExplanation_result result = new getArchitectureScoreExplanation_result();
      receiveBase(result, "getArchitectureScoreExplanation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArchitectureScoreExplanation failed: unknown result");
    }

    public java.util.List<ObjectiveSatisfaction> getPanelScoreExplanation(String problem, BinaryInputArchitecture arch, String panel) throws org.apache.thrift.TException
    {
      send_getPanelScoreExplanation(problem, arch, panel);
      return recv_getPanelScoreExplanation();
    }

    public void send_getPanelScoreExplanation(String problem, BinaryInputArchitecture arch, String panel) throws org.apache.thrift.TException
    {
      getPanelScoreExplanation_args args = new getPanelScoreExplanation_args();
      args.setProblem(problem);
      args.setArch(arch);
      args.setPanel(panel);
      sendBase("getPanelScoreExplanation", args);
    }

    public java.util.List<ObjectiveSatisfaction> recv_getPanelScoreExplanation() throws org.apache.thrift.TException
    {
      getPanelScoreExplanation_result result = new getPanelScoreExplanation_result();
      receiveBase(result, "getPanelScoreExplanation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPanelScoreExplanation failed: unknown result");
    }

    public java.util.List<ObjectiveSatisfaction> getObjectiveScoreExplanation(String problem, BinaryInputArchitecture arch, String objective) throws org.apache.thrift.TException
    {
      send_getObjectiveScoreExplanation(problem, arch, objective);
      return recv_getObjectiveScoreExplanation();
    }

    public void send_getObjectiveScoreExplanation(String problem, BinaryInputArchitecture arch, String objective) throws org.apache.thrift.TException
    {
      getObjectiveScoreExplanation_args args = new getObjectiveScoreExplanation_args();
      args.setProblem(problem);
      args.setArch(arch);
      args.setObjective(objective);
      sendBase("getObjectiveScoreExplanation", args);
    }

    public java.util.List<ObjectiveSatisfaction> recv_getObjectiveScoreExplanation() throws org.apache.thrift.TException
    {
      getObjectiveScoreExplanation_result result = new getObjectiveScoreExplanation_result();
      receiveBase(result, "getObjectiveScoreExplanation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getObjectiveScoreExplanation failed: unknown result");
    }

    public boolean isGARunning(String id) throws org.apache.thrift.TException
    {
      send_isGARunning(id);
      return recv_isGARunning();
    }

    public void send_isGARunning(String id) throws org.apache.thrift.TException
    {
      isGARunning_args args = new isGARunning_args();
      args.setId(id);
      sendBase("isGARunning", args);
    }

    public boolean recv_isGARunning() throws org.apache.thrift.TException
    {
      isGARunning_result result = new isGARunning_result();
      receiveBase(result, "isGARunning");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isGARunning failed: unknown result");
    }

    public int stopGA(String id) throws org.apache.thrift.TException
    {
      send_stopGA(id);
      return recv_stopGA();
    }

    public void send_stopGA(String id) throws org.apache.thrift.TException
    {
      stopGA_args args = new stopGA_args();
      args.setId(id);
      sendBase("stopGA", args);
    }

    public int recv_stopGA() throws org.apache.thrift.TException
    {
      stopGA_result result = new stopGA_result();
      receiveBase(result, "stopGA");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopGA failed: unknown result");
    }

    public String startGABinaryInput(String problem, java.util.List<BinaryInputArchitecture> dataset, String username) throws org.apache.thrift.TException
    {
      send_startGABinaryInput(problem, dataset, username);
      return recv_startGABinaryInput();
    }

    public void send_startGABinaryInput(String problem, java.util.List<BinaryInputArchitecture> dataset, String username) throws org.apache.thrift.TException
    {
      startGABinaryInput_args args = new startGABinaryInput_args();
      args.setProblem(problem);
      args.setDataset(dataset);
      args.setUsername(username);
      sendBase("startGABinaryInput", args);
    }

    public String recv_startGABinaryInput() throws org.apache.thrift.TException
    {
      startGABinaryInput_result result = new startGABinaryInput_result();
      receiveBase(result, "startGABinaryInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startGABinaryInput failed: unknown result");
    }

    public String startGADiscreteInput(String problem, java.util.List<DiscreteInputArchitecture> dataset, String username) throws org.apache.thrift.TException
    {
      send_startGADiscreteInput(problem, dataset, username);
      return recv_startGADiscreteInput();
    }

    public void send_startGADiscreteInput(String problem, java.util.List<DiscreteInputArchitecture> dataset, String username) throws org.apache.thrift.TException
    {
      startGADiscreteInput_args args = new startGADiscreteInput_args();
      args.setProblem(problem);
      args.setDataset(dataset);
      args.setUsername(username);
      sendBase("startGADiscreteInput", args);
    }

    public String recv_startGADiscreteInput() throws org.apache.thrift.TException
    {
      startGADiscreteInput_result result = new startGADiscreteInput_result();
      receiveBase(result, "startGADiscreteInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startGADiscreteInput failed: unknown result");
    }

    public java.util.List<SubscoreInformation> getArchScienceInformationBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_getArchScienceInformationBinaryInput(problem, arch);
      return recv_getArchScienceInformationBinaryInput();
    }

    public void send_getArchScienceInformationBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      getArchScienceInformationBinaryInput_args args = new getArchScienceInformationBinaryInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("getArchScienceInformationBinaryInput", args);
    }

    public java.util.List<SubscoreInformation> recv_getArchScienceInformationBinaryInput() throws org.apache.thrift.TException
    {
      getArchScienceInformationBinaryInput_result result = new getArchScienceInformationBinaryInput_result();
      receiveBase(result, "getArchScienceInformationBinaryInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArchScienceInformationBinaryInput failed: unknown result");
    }

    public java.util.List<MissionCostInformation> getArchCostInformationBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_getArchCostInformationBinaryInput(problem, arch);
      return recv_getArchCostInformationBinaryInput();
    }

    public void send_getArchCostInformationBinaryInput(String problem, BinaryInputArchitecture arch) throws org.apache.thrift.TException
    {
      getArchCostInformationBinaryInput_args args = new getArchCostInformationBinaryInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("getArchCostInformationBinaryInput", args);
    }

    public java.util.List<MissionCostInformation> recv_getArchCostInformationBinaryInput() throws org.apache.thrift.TException
    {
      getArchCostInformationBinaryInput_result result = new getArchCostInformationBinaryInput_result();
      receiveBase(result, "getArchCostInformationBinaryInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArchCostInformationBinaryInput failed: unknown result");
    }

    public SubobjectiveDetails getSubscoreDetailsBinaryInput(String problem, BinaryInputArchitecture arch, String subobj) throws org.apache.thrift.TException
    {
      send_getSubscoreDetailsBinaryInput(problem, arch, subobj);
      return recv_getSubscoreDetailsBinaryInput();
    }

    public void send_getSubscoreDetailsBinaryInput(String problem, BinaryInputArchitecture arch, String subobj) throws org.apache.thrift.TException
    {
      getSubscoreDetailsBinaryInput_args args = new getSubscoreDetailsBinaryInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      args.setSubobj(subobj);
      sendBase("getSubscoreDetailsBinaryInput", args);
    }

    public SubobjectiveDetails recv_getSubscoreDetailsBinaryInput() throws org.apache.thrift.TException
    {
      getSubscoreDetailsBinaryInput_result result = new getSubscoreDetailsBinaryInput_result();
      receiveBase(result, "getSubscoreDetailsBinaryInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubscoreDetailsBinaryInput failed: unknown result");
    }

    public java.util.List<SubscoreInformation> getArchScienceInformationDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_getArchScienceInformationDiscreteInput(problem, arch);
      return recv_getArchScienceInformationDiscreteInput();
    }

    public void send_getArchScienceInformationDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException
    {
      getArchScienceInformationDiscreteInput_args args = new getArchScienceInformationDiscreteInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("getArchScienceInformationDiscreteInput", args);
    }

    public java.util.List<SubscoreInformation> recv_getArchScienceInformationDiscreteInput() throws org.apache.thrift.TException
    {
      getArchScienceInformationDiscreteInput_result result = new getArchScienceInformationDiscreteInput_result();
      receiveBase(result, "getArchScienceInformationDiscreteInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArchScienceInformationDiscreteInput failed: unknown result");
    }

    public java.util.List<MissionCostInformation> getArchCostInformationDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException
    {
      send_getArchCostInformationDiscreteInput(problem, arch);
      return recv_getArchCostInformationDiscreteInput();
    }

    public void send_getArchCostInformationDiscreteInput(String problem, DiscreteInputArchitecture arch) throws org.apache.thrift.TException
    {
      getArchCostInformationDiscreteInput_args args = new getArchCostInformationDiscreteInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      sendBase("getArchCostInformationDiscreteInput", args);
    }

    public java.util.List<MissionCostInformation> recv_getArchCostInformationDiscreteInput() throws org.apache.thrift.TException
    {
      getArchCostInformationDiscreteInput_result result = new getArchCostInformationDiscreteInput_result();
      receiveBase(result, "getArchCostInformationDiscreteInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArchCostInformationDiscreteInput failed: unknown result");
    }

    public SubobjectiveDetails getSubscoreDetailsDiscreteInput(String problem, DiscreteInputArchitecture arch, String subobj) throws org.apache.thrift.TException
    {
      send_getSubscoreDetailsDiscreteInput(problem, arch, subobj);
      return recv_getSubscoreDetailsDiscreteInput();
    }

    public void send_getSubscoreDetailsDiscreteInput(String problem, DiscreteInputArchitecture arch, String subobj) throws org.apache.thrift.TException
    {
      getSubscoreDetailsDiscreteInput_args args = new getSubscoreDetailsDiscreteInput_args();
      args.setProblem(problem);
      args.setArch(arch);
      args.setSubobj(subobj);
      sendBase("getSubscoreDetailsDiscreteInput", args);
    }

    public SubobjectiveDetails recv_getSubscoreDetailsDiscreteInput() throws org.apache.thrift.TException
    {
      getSubscoreDetailsDiscreteInput_result result = new getSubscoreDetailsDiscreteInput_result();
      receiveBase(result, "getSubscoreDetailsDiscreteInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubscoreDetailsDiscreteInput failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void evalBinaryInputArch(String problem, java.util.List<Boolean> inputs, org.apache.thrift.async.AsyncMethodCallback<BinaryInputArchitecture> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evalBinaryInputArch_call method_call = new evalBinaryInputArch_call(problem, inputs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evalBinaryInputArch_call extends org.apache.thrift.async.TAsyncMethodCall<BinaryInputArchitecture> {
      private String problem;
      private java.util.List<Boolean> inputs;
      public evalBinaryInputArch_call(String problem, java.util.List<Boolean> inputs, org.apache.thrift.async.AsyncMethodCallback<BinaryInputArchitecture> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.inputs = inputs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evalBinaryInputArch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evalBinaryInputArch_args args = new evalBinaryInputArch_args();
        args.setProblem(problem);
        args.setInputs(inputs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BinaryInputArchitecture getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evalBinaryInputArch();
      }
    }

    public void evalDiscreteInputArch(String problem, java.util.List<Integer> inputs, org.apache.thrift.async.AsyncMethodCallback<DiscreteInputArchitecture> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evalDiscreteInputArch_call method_call = new evalDiscreteInputArch_call(problem, inputs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evalDiscreteInputArch_call extends org.apache.thrift.async.TAsyncMethodCall<DiscreteInputArchitecture> {
      private String problem;
      private java.util.List<Integer> inputs;
      public evalDiscreteInputArch_call(String problem, java.util.List<Integer> inputs, org.apache.thrift.async.AsyncMethodCallback<DiscreteInputArchitecture> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.inputs = inputs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evalDiscreteInputArch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evalDiscreteInputArch_args args = new evalDiscreteInputArch_args();
        args.setProblem(problem);
        args.setInputs(inputs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DiscreteInputArchitecture getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evalDiscreteInputArch();
      }
    }

    public void runLocalSearchBinaryInput(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<BinaryInputArchitecture>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runLocalSearchBinaryInput_call method_call = new runLocalSearchBinaryInput_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runLocalSearchBinaryInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<BinaryInputArchitecture>> {
      private String problem;
      private BinaryInputArchitecture arch;
      public runLocalSearchBinaryInput_call(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<BinaryInputArchitecture>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runLocalSearchBinaryInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runLocalSearchBinaryInput_args args = new runLocalSearchBinaryInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<BinaryInputArchitecture> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runLocalSearchBinaryInput();
      }
    }

    public void runLocalSearchDiscreteInput(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DiscreteInputArchitecture>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runLocalSearchDiscreteInput_call method_call = new runLocalSearchDiscreteInput_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runLocalSearchDiscreteInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<DiscreteInputArchitecture>> {
      private String problem;
      private DiscreteInputArchitecture arch;
      public runLocalSearchDiscreteInput_call(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DiscreteInputArchitecture>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runLocalSearchDiscreteInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runLocalSearchDiscreteInput_args args = new runLocalSearchDiscreteInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<DiscreteInputArchitecture> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runLocalSearchDiscreteInput();
      }
    }

    public void getOrbitList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrbitList_call method_call = new getOrbitList_call(problem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrbitList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      public getOrbitList_call(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrbitList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrbitList_args args = new getOrbitList_args();
        args.setProblem(problem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrbitList();
      }
    }

    public void getInstrumentList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInstrumentList_call method_call = new getInstrumentList_call(problem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInstrumentList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      public getInstrumentList_call(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInstrumentList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInstrumentList_args args = new getInstrumentList_args();
        args.setProblem(problem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInstrumentList();
      }
    }

    public void getObjectiveList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getObjectiveList_call method_call = new getObjectiveList_call(problem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getObjectiveList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      public getObjectiveList_call(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getObjectiveList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getObjectiveList_args args = new getObjectiveList_args();
        args.setProblem(problem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getObjectiveList();
      }
    }

    public void getSubobjectiveList(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubobjectiveList_call method_call = new getSubobjectiveList_call(problem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubobjectiveList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      public getSubobjectiveList_call(String problem, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubobjectiveList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubobjectiveList_args args = new getSubobjectiveList_args();
        args.setProblem(problem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubobjectiveList();
      }
    }

    public void getInstrumentsForObjective(String problem, String objective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInstrumentsForObjective_call method_call = new getInstrumentsForObjective_call(problem, objective, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInstrumentsForObjective_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      private String objective;
      public getInstrumentsForObjective_call(String problem, String objective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.objective = objective;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInstrumentsForObjective", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInstrumentsForObjective_args args = new getInstrumentsForObjective_args();
        args.setProblem(problem);
        args.setObjective(objective);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInstrumentsForObjective();
      }
    }

    public void getInstrumentsForPanel(String problem, String panel, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInstrumentsForPanel_call method_call = new getInstrumentsForPanel_call(problem, panel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInstrumentsForPanel_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      private String panel;
      public getInstrumentsForPanel_call(String problem, String panel, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.panel = panel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInstrumentsForPanel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInstrumentsForPanel_args args = new getInstrumentsForPanel_args();
        args.setProblem(problem);
        args.setPanel(panel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInstrumentsForPanel();
      }
    }

    public void getCritiqueBinaryInputArch(String problem, BinaryInputArchitecture inputs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCritiqueBinaryInputArch_call method_call = new getCritiqueBinaryInputArch_call(problem, inputs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCritiqueBinaryInputArch_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      private BinaryInputArchitecture inputs;
      public getCritiqueBinaryInputArch_call(String problem, BinaryInputArchitecture inputs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.inputs = inputs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCritiqueBinaryInputArch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCritiqueBinaryInputArch_args args = new getCritiqueBinaryInputArch_args();
        args.setProblem(problem);
        args.setInputs(inputs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCritiqueBinaryInputArch();
      }
    }

    public void getCritiqueDiscreteInputArch(String problem, DiscreteInputArchitecture inputs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCritiqueDiscreteInputArch_call method_call = new getCritiqueDiscreteInputArch_call(problem, inputs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCritiqueDiscreteInputArch_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<String>> {
      private String problem;
      private DiscreteInputArchitecture inputs;
      public getCritiqueDiscreteInputArch_call(String problem, DiscreteInputArchitecture inputs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.inputs = inputs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCritiqueDiscreteInputArch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCritiqueDiscreteInputArch_args args = new getCritiqueDiscreteInputArch_args();
        args.setProblem(problem);
        args.setInputs(inputs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCritiqueDiscreteInputArch();
      }
    }

    public void getArchitectureScoreExplanation(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArchitectureScoreExplanation_call method_call = new getArchitectureScoreExplanation_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArchitectureScoreExplanation_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ObjectiveSatisfaction>> {
      private String problem;
      private BinaryInputArchitecture arch;
      public getArchitectureScoreExplanation_call(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArchitectureScoreExplanation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArchitectureScoreExplanation_args args = new getArchitectureScoreExplanation_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ObjectiveSatisfaction> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArchitectureScoreExplanation();
      }
    }

    public void getPanelScoreExplanation(String problem, BinaryInputArchitecture arch, String panel, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPanelScoreExplanation_call method_call = new getPanelScoreExplanation_call(problem, arch, panel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPanelScoreExplanation_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ObjectiveSatisfaction>> {
      private String problem;
      private BinaryInputArchitecture arch;
      private String panel;
      public getPanelScoreExplanation_call(String problem, BinaryInputArchitecture arch, String panel, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
        this.panel = panel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPanelScoreExplanation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPanelScoreExplanation_args args = new getPanelScoreExplanation_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.setPanel(panel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ObjectiveSatisfaction> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPanelScoreExplanation();
      }
    }

    public void getObjectiveScoreExplanation(String problem, BinaryInputArchitecture arch, String objective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getObjectiveScoreExplanation_call method_call = new getObjectiveScoreExplanation_call(problem, arch, objective, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getObjectiveScoreExplanation_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ObjectiveSatisfaction>> {
      private String problem;
      private BinaryInputArchitecture arch;
      private String objective;
      public getObjectiveScoreExplanation_call(String problem, BinaryInputArchitecture arch, String objective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
        this.objective = objective;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getObjectiveScoreExplanation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getObjectiveScoreExplanation_args args = new getObjectiveScoreExplanation_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.setObjective(objective);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ObjectiveSatisfaction> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getObjectiveScoreExplanation();
      }
    }

    public void isGARunning(String id, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isGARunning_call method_call = new isGARunning_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isGARunning_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String id;
      public isGARunning_call(String id, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isGARunning", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isGARunning_args args = new isGARunning_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isGARunning();
      }
    }

    public void stopGA(String id, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopGA_call method_call = new stopGA_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopGA_call extends org.apache.thrift.async.TAsyncMethodCall<Integer> {
      private String id;
      public stopGA_call(String id, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopGA", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopGA_args args = new stopGA_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopGA();
      }
    }

    public void startGABinaryInput(String problem, java.util.List<BinaryInputArchitecture> dataset, String username, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startGABinaryInput_call method_call = new startGABinaryInput_call(problem, dataset, username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startGABinaryInput_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String problem;
      private java.util.List<BinaryInputArchitecture> dataset;
      private String username;
      public startGABinaryInput_call(String problem, java.util.List<BinaryInputArchitecture> dataset, String username, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.dataset = dataset;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startGABinaryInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startGABinaryInput_args args = new startGABinaryInput_args();
        args.setProblem(problem);
        args.setDataset(dataset);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startGABinaryInput();
      }
    }

    public void startGADiscreteInput(String problem, java.util.List<DiscreteInputArchitecture> dataset, String username, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startGADiscreteInput_call method_call = new startGADiscreteInput_call(problem, dataset, username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startGADiscreteInput_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String problem;
      private java.util.List<DiscreteInputArchitecture> dataset;
      private String username;
      public startGADiscreteInput_call(String problem, java.util.List<DiscreteInputArchitecture> dataset, String username, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.dataset = dataset;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startGADiscreteInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startGADiscreteInput_args args = new startGADiscreteInput_args();
        args.setProblem(problem);
        args.setDataset(dataset);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startGADiscreteInput();
      }
    }

    public void getArchScienceInformationBinaryInput(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArchScienceInformationBinaryInput_call method_call = new getArchScienceInformationBinaryInput_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArchScienceInformationBinaryInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SubscoreInformation>> {
      private String problem;
      private BinaryInputArchitecture arch;
      public getArchScienceInformationBinaryInput_call(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArchScienceInformationBinaryInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArchScienceInformationBinaryInput_args args = new getArchScienceInformationBinaryInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SubscoreInformation> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArchScienceInformationBinaryInput();
      }
    }

    public void getArchCostInformationBinaryInput(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArchCostInformationBinaryInput_call method_call = new getArchCostInformationBinaryInput_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArchCostInformationBinaryInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MissionCostInformation>> {
      private String problem;
      private BinaryInputArchitecture arch;
      public getArchCostInformationBinaryInput_call(String problem, BinaryInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArchCostInformationBinaryInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArchCostInformationBinaryInput_args args = new getArchCostInformationBinaryInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MissionCostInformation> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArchCostInformationBinaryInput();
      }
    }

    public void getSubscoreDetailsBinaryInput(String problem, BinaryInputArchitecture arch, String subobj, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubscoreDetailsBinaryInput_call method_call = new getSubscoreDetailsBinaryInput_call(problem, arch, subobj, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubscoreDetailsBinaryInput_call extends org.apache.thrift.async.TAsyncMethodCall<SubobjectiveDetails> {
      private String problem;
      private BinaryInputArchitecture arch;
      private String subobj;
      public getSubscoreDetailsBinaryInput_call(String problem, BinaryInputArchitecture arch, String subobj, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
        this.subobj = subobj;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubscoreDetailsBinaryInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubscoreDetailsBinaryInput_args args = new getSubscoreDetailsBinaryInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.setSubobj(subobj);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SubobjectiveDetails getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubscoreDetailsBinaryInput();
      }
    }

    public void getArchScienceInformationDiscreteInput(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArchScienceInformationDiscreteInput_call method_call = new getArchScienceInformationDiscreteInput_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArchScienceInformationDiscreteInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SubscoreInformation>> {
      private String problem;
      private DiscreteInputArchitecture arch;
      public getArchScienceInformationDiscreteInput_call(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArchScienceInformationDiscreteInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArchScienceInformationDiscreteInput_args args = new getArchScienceInformationDiscreteInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SubscoreInformation> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArchScienceInformationDiscreteInput();
      }
    }

    public void getArchCostInformationDiscreteInput(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArchCostInformationDiscreteInput_call method_call = new getArchCostInformationDiscreteInput_call(problem, arch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArchCostInformationDiscreteInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MissionCostInformation>> {
      private String problem;
      private DiscreteInputArchitecture arch;
      public getArchCostInformationDiscreteInput_call(String problem, DiscreteInputArchitecture arch, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArchCostInformationDiscreteInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArchCostInformationDiscreteInput_args args = new getArchCostInformationDiscreteInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MissionCostInformation> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArchCostInformationDiscreteInput();
      }
    }

    public void getSubscoreDetailsDiscreteInput(String problem, DiscreteInputArchitecture arch, String subobj, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubscoreDetailsDiscreteInput_call method_call = new getSubscoreDetailsDiscreteInput_call(problem, arch, subobj, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubscoreDetailsDiscreteInput_call extends org.apache.thrift.async.TAsyncMethodCall<SubobjectiveDetails> {
      private String problem;
      private DiscreteInputArchitecture arch;
      private String subobj;
      public getSubscoreDetailsDiscreteInput_call(String problem, DiscreteInputArchitecture arch, String subobj, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
        this.subobj = subobj;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubscoreDetailsDiscreteInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubscoreDetailsDiscreteInput_args args = new getSubscoreDetailsDiscreteInput_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.setSubobj(subobj);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SubobjectiveDetails getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubscoreDetailsDiscreteInput();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("evalBinaryInputArch", new evalBinaryInputArch());
      processMap.put("evalDiscreteInputArch", new evalDiscreteInputArch());
      processMap.put("runLocalSearchBinaryInput", new runLocalSearchBinaryInput());
      processMap.put("runLocalSearchDiscreteInput", new runLocalSearchDiscreteInput());
      processMap.put("getOrbitList", new getOrbitList());
      processMap.put("getInstrumentList", new getInstrumentList());
      processMap.put("getObjectiveList", new getObjectiveList());
      processMap.put("getSubobjectiveList", new getSubobjectiveList());
      processMap.put("getInstrumentsForObjective", new getInstrumentsForObjective());
      processMap.put("getInstrumentsForPanel", new getInstrumentsForPanel());
      processMap.put("getCritiqueBinaryInputArch", new getCritiqueBinaryInputArch());
      processMap.put("getCritiqueDiscreteInputArch", new getCritiqueDiscreteInputArch());
      processMap.put("getArchitectureScoreExplanation", new getArchitectureScoreExplanation());
      processMap.put("getPanelScoreExplanation", new getPanelScoreExplanation());
      processMap.put("getObjectiveScoreExplanation", new getObjectiveScoreExplanation());
      processMap.put("isGARunning", new isGARunning());
      processMap.put("stopGA", new stopGA());
      processMap.put("startGABinaryInput", new startGABinaryInput());
      processMap.put("startGADiscreteInput", new startGADiscreteInput());
      processMap.put("getArchScienceInformationBinaryInput", new getArchScienceInformationBinaryInput());
      processMap.put("getArchCostInformationBinaryInput", new getArchCostInformationBinaryInput());
      processMap.put("getSubscoreDetailsBinaryInput", new getSubscoreDetailsBinaryInput());
      processMap.put("getArchScienceInformationDiscreteInput", new getArchScienceInformationDiscreteInput());
      processMap.put("getArchCostInformationDiscreteInput", new getArchCostInformationDiscreteInput());
      processMap.put("getSubscoreDetailsDiscreteInput", new getSubscoreDetailsDiscreteInput());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class evalBinaryInputArch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evalBinaryInputArch_args> {
      public evalBinaryInputArch() {
        super("evalBinaryInputArch");
      }

      public evalBinaryInputArch_args getEmptyArgsInstance() {
        return new evalBinaryInputArch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public evalBinaryInputArch_result getResult(I iface, evalBinaryInputArch_args args) throws org.apache.thrift.TException {
        evalBinaryInputArch_result result = new evalBinaryInputArch_result();
        result.success = iface.evalBinaryInputArch(args.problem, args.inputs);
        return result;
      }
    }

    public static class evalDiscreteInputArch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evalDiscreteInputArch_args> {
      public evalDiscreteInputArch() {
        super("evalDiscreteInputArch");
      }

      public evalDiscreteInputArch_args getEmptyArgsInstance() {
        return new evalDiscreteInputArch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public evalDiscreteInputArch_result getResult(I iface, evalDiscreteInputArch_args args) throws org.apache.thrift.TException {
        evalDiscreteInputArch_result result = new evalDiscreteInputArch_result();
        result.success = iface.evalDiscreteInputArch(args.problem, args.inputs);
        return result;
      }
    }

    public static class runLocalSearchBinaryInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runLocalSearchBinaryInput_args> {
      public runLocalSearchBinaryInput() {
        super("runLocalSearchBinaryInput");
      }

      public runLocalSearchBinaryInput_args getEmptyArgsInstance() {
        return new runLocalSearchBinaryInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public runLocalSearchBinaryInput_result getResult(I iface, runLocalSearchBinaryInput_args args) throws org.apache.thrift.TException {
        runLocalSearchBinaryInput_result result = new runLocalSearchBinaryInput_result();
        result.success = iface.runLocalSearchBinaryInput(args.problem, args.arch);
        return result;
      }
    }

    public static class runLocalSearchDiscreteInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runLocalSearchDiscreteInput_args> {
      public runLocalSearchDiscreteInput() {
        super("runLocalSearchDiscreteInput");
      }

      public runLocalSearchDiscreteInput_args getEmptyArgsInstance() {
        return new runLocalSearchDiscreteInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public runLocalSearchDiscreteInput_result getResult(I iface, runLocalSearchDiscreteInput_args args) throws org.apache.thrift.TException {
        runLocalSearchDiscreteInput_result result = new runLocalSearchDiscreteInput_result();
        result.success = iface.runLocalSearchDiscreteInput(args.problem, args.arch);
        return result;
      }
    }

    public static class getOrbitList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrbitList_args> {
      public getOrbitList() {
        super("getOrbitList");
      }

      public getOrbitList_args getEmptyArgsInstance() {
        return new getOrbitList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getOrbitList_result getResult(I iface, getOrbitList_args args) throws org.apache.thrift.TException {
        getOrbitList_result result = new getOrbitList_result();
        result.success = iface.getOrbitList(args.problem);
        return result;
      }
    }

    public static class getInstrumentList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInstrumentList_args> {
      public getInstrumentList() {
        super("getInstrumentList");
      }

      public getInstrumentList_args getEmptyArgsInstance() {
        return new getInstrumentList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getInstrumentList_result getResult(I iface, getInstrumentList_args args) throws org.apache.thrift.TException {
        getInstrumentList_result result = new getInstrumentList_result();
        result.success = iface.getInstrumentList(args.problem);
        return result;
      }
    }

    public static class getObjectiveList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getObjectiveList_args> {
      public getObjectiveList() {
        super("getObjectiveList");
      }

      public getObjectiveList_args getEmptyArgsInstance() {
        return new getObjectiveList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getObjectiveList_result getResult(I iface, getObjectiveList_args args) throws org.apache.thrift.TException {
        getObjectiveList_result result = new getObjectiveList_result();
        result.success = iface.getObjectiveList(args.problem);
        return result;
      }
    }

    public static class getSubobjectiveList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubobjectiveList_args> {
      public getSubobjectiveList() {
        super("getSubobjectiveList");
      }

      public getSubobjectiveList_args getEmptyArgsInstance() {
        return new getSubobjectiveList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSubobjectiveList_result getResult(I iface, getSubobjectiveList_args args) throws org.apache.thrift.TException {
        getSubobjectiveList_result result = new getSubobjectiveList_result();
        result.success = iface.getSubobjectiveList(args.problem);
        return result;
      }
    }

    public static class getInstrumentsForObjective<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInstrumentsForObjective_args> {
      public getInstrumentsForObjective() {
        super("getInstrumentsForObjective");
      }

      public getInstrumentsForObjective_args getEmptyArgsInstance() {
        return new getInstrumentsForObjective_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getInstrumentsForObjective_result getResult(I iface, getInstrumentsForObjective_args args) throws org.apache.thrift.TException {
        getInstrumentsForObjective_result result = new getInstrumentsForObjective_result();
        result.success = iface.getInstrumentsForObjective(args.problem, args.objective);
        return result;
      }
    }

    public static class getInstrumentsForPanel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInstrumentsForPanel_args> {
      public getInstrumentsForPanel() {
        super("getInstrumentsForPanel");
      }

      public getInstrumentsForPanel_args getEmptyArgsInstance() {
        return new getInstrumentsForPanel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getInstrumentsForPanel_result getResult(I iface, getInstrumentsForPanel_args args) throws org.apache.thrift.TException {
        getInstrumentsForPanel_result result = new getInstrumentsForPanel_result();
        result.success = iface.getInstrumentsForPanel(args.problem, args.panel);
        return result;
      }
    }

    public static class getCritiqueBinaryInputArch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCritiqueBinaryInputArch_args> {
      public getCritiqueBinaryInputArch() {
        super("getCritiqueBinaryInputArch");
      }

      public getCritiqueBinaryInputArch_args getEmptyArgsInstance() {
        return new getCritiqueBinaryInputArch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCritiqueBinaryInputArch_result getResult(I iface, getCritiqueBinaryInputArch_args args) throws org.apache.thrift.TException {
        getCritiqueBinaryInputArch_result result = new getCritiqueBinaryInputArch_result();
        result.success = iface.getCritiqueBinaryInputArch(args.problem, args.inputs);
        return result;
      }
    }

    public static class getCritiqueDiscreteInputArch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCritiqueDiscreteInputArch_args> {
      public getCritiqueDiscreteInputArch() {
        super("getCritiqueDiscreteInputArch");
      }

      public getCritiqueDiscreteInputArch_args getEmptyArgsInstance() {
        return new getCritiqueDiscreteInputArch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCritiqueDiscreteInputArch_result getResult(I iface, getCritiqueDiscreteInputArch_args args) throws org.apache.thrift.TException {
        getCritiqueDiscreteInputArch_result result = new getCritiqueDiscreteInputArch_result();
        result.success = iface.getCritiqueDiscreteInputArch(args.problem, args.inputs);
        return result;
      }
    }

    public static class getArchitectureScoreExplanation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArchitectureScoreExplanation_args> {
      public getArchitectureScoreExplanation() {
        super("getArchitectureScoreExplanation");
      }

      public getArchitectureScoreExplanation_args getEmptyArgsInstance() {
        return new getArchitectureScoreExplanation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getArchitectureScoreExplanation_result getResult(I iface, getArchitectureScoreExplanation_args args) throws org.apache.thrift.TException {
        getArchitectureScoreExplanation_result result = new getArchitectureScoreExplanation_result();
        result.success = iface.getArchitectureScoreExplanation(args.problem, args.arch);
        return result;
      }
    }

    public static class getPanelScoreExplanation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPanelScoreExplanation_args> {
      public getPanelScoreExplanation() {
        super("getPanelScoreExplanation");
      }

      public getPanelScoreExplanation_args getEmptyArgsInstance() {
        return new getPanelScoreExplanation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getPanelScoreExplanation_result getResult(I iface, getPanelScoreExplanation_args args) throws org.apache.thrift.TException {
        getPanelScoreExplanation_result result = new getPanelScoreExplanation_result();
        result.success = iface.getPanelScoreExplanation(args.problem, args.arch, args.panel);
        return result;
      }
    }

    public static class getObjectiveScoreExplanation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getObjectiveScoreExplanation_args> {
      public getObjectiveScoreExplanation() {
        super("getObjectiveScoreExplanation");
      }

      public getObjectiveScoreExplanation_args getEmptyArgsInstance() {
        return new getObjectiveScoreExplanation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getObjectiveScoreExplanation_result getResult(I iface, getObjectiveScoreExplanation_args args) throws org.apache.thrift.TException {
        getObjectiveScoreExplanation_result result = new getObjectiveScoreExplanation_result();
        result.success = iface.getObjectiveScoreExplanation(args.problem, args.arch, args.objective);
        return result;
      }
    }

    public static class isGARunning<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isGARunning_args> {
      public isGARunning() {
        super("isGARunning");
      }

      public isGARunning_args getEmptyArgsInstance() {
        return new isGARunning_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public isGARunning_result getResult(I iface, isGARunning_args args) throws org.apache.thrift.TException {
        isGARunning_result result = new isGARunning_result();
        result.success = iface.isGARunning(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class stopGA<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopGA_args> {
      public stopGA() {
        super("stopGA");
      }

      public stopGA_args getEmptyArgsInstance() {
        return new stopGA_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public stopGA_result getResult(I iface, stopGA_args args) throws org.apache.thrift.TException {
        stopGA_result result = new stopGA_result();
        result.success = iface.stopGA(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class startGABinaryInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startGABinaryInput_args> {
      public startGABinaryInput() {
        super("startGABinaryInput");
      }

      public startGABinaryInput_args getEmptyArgsInstance() {
        return new startGABinaryInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public startGABinaryInput_result getResult(I iface, startGABinaryInput_args args) throws org.apache.thrift.TException {
        startGABinaryInput_result result = new startGABinaryInput_result();
        result.success = iface.startGABinaryInput(args.problem, args.dataset, args.username);
        return result;
      }
    }

    public static class startGADiscreteInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startGADiscreteInput_args> {
      public startGADiscreteInput() {
        super("startGADiscreteInput");
      }

      public startGADiscreteInput_args getEmptyArgsInstance() {
        return new startGADiscreteInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public startGADiscreteInput_result getResult(I iface, startGADiscreteInput_args args) throws org.apache.thrift.TException {
        startGADiscreteInput_result result = new startGADiscreteInput_result();
        result.success = iface.startGADiscreteInput(args.problem, args.dataset, args.username);
        return result;
      }
    }

    public static class getArchScienceInformationBinaryInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArchScienceInformationBinaryInput_args> {
      public getArchScienceInformationBinaryInput() {
        super("getArchScienceInformationBinaryInput");
      }

      public getArchScienceInformationBinaryInput_args getEmptyArgsInstance() {
        return new getArchScienceInformationBinaryInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getArchScienceInformationBinaryInput_result getResult(I iface, getArchScienceInformationBinaryInput_args args) throws org.apache.thrift.TException {
        getArchScienceInformationBinaryInput_result result = new getArchScienceInformationBinaryInput_result();
        result.success = iface.getArchScienceInformationBinaryInput(args.problem, args.arch);
        return result;
      }
    }

    public static class getArchCostInformationBinaryInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArchCostInformationBinaryInput_args> {
      public getArchCostInformationBinaryInput() {
        super("getArchCostInformationBinaryInput");
      }

      public getArchCostInformationBinaryInput_args getEmptyArgsInstance() {
        return new getArchCostInformationBinaryInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getArchCostInformationBinaryInput_result getResult(I iface, getArchCostInformationBinaryInput_args args) throws org.apache.thrift.TException {
        getArchCostInformationBinaryInput_result result = new getArchCostInformationBinaryInput_result();
        result.success = iface.getArchCostInformationBinaryInput(args.problem, args.arch);
        return result;
      }
    }

    public static class getSubscoreDetailsBinaryInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubscoreDetailsBinaryInput_args> {
      public getSubscoreDetailsBinaryInput() {
        super("getSubscoreDetailsBinaryInput");
      }

      public getSubscoreDetailsBinaryInput_args getEmptyArgsInstance() {
        return new getSubscoreDetailsBinaryInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSubscoreDetailsBinaryInput_result getResult(I iface, getSubscoreDetailsBinaryInput_args args) throws org.apache.thrift.TException {
        getSubscoreDetailsBinaryInput_result result = new getSubscoreDetailsBinaryInput_result();
        result.success = iface.getSubscoreDetailsBinaryInput(args.problem, args.arch, args.subobj);
        return result;
      }
    }

    public static class getArchScienceInformationDiscreteInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArchScienceInformationDiscreteInput_args> {
      public getArchScienceInformationDiscreteInput() {
        super("getArchScienceInformationDiscreteInput");
      }

      public getArchScienceInformationDiscreteInput_args getEmptyArgsInstance() {
        return new getArchScienceInformationDiscreteInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getArchScienceInformationDiscreteInput_result getResult(I iface, getArchScienceInformationDiscreteInput_args args) throws org.apache.thrift.TException {
        getArchScienceInformationDiscreteInput_result result = new getArchScienceInformationDiscreteInput_result();
        result.success = iface.getArchScienceInformationDiscreteInput(args.problem, args.arch);
        return result;
      }
    }

    public static class getArchCostInformationDiscreteInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArchCostInformationDiscreteInput_args> {
      public getArchCostInformationDiscreteInput() {
        super("getArchCostInformationDiscreteInput");
      }

      public getArchCostInformationDiscreteInput_args getEmptyArgsInstance() {
        return new getArchCostInformationDiscreteInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getArchCostInformationDiscreteInput_result getResult(I iface, getArchCostInformationDiscreteInput_args args) throws org.apache.thrift.TException {
        getArchCostInformationDiscreteInput_result result = new getArchCostInformationDiscreteInput_result();
        result.success = iface.getArchCostInformationDiscreteInput(args.problem, args.arch);
        return result;
      }
    }

    public static class getSubscoreDetailsDiscreteInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubscoreDetailsDiscreteInput_args> {
      public getSubscoreDetailsDiscreteInput() {
        super("getSubscoreDetailsDiscreteInput");
      }

      public getSubscoreDetailsDiscreteInput_args getEmptyArgsInstance() {
        return new getSubscoreDetailsDiscreteInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSubscoreDetailsDiscreteInput_result getResult(I iface, getSubscoreDetailsDiscreteInput_args args) throws org.apache.thrift.TException {
        getSubscoreDetailsDiscreteInput_result result = new getSubscoreDetailsDiscreteInput_result();
        result.success = iface.getSubscoreDetailsDiscreteInput(args.problem, args.arch, args.subobj);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("evalBinaryInputArch", new evalBinaryInputArch());
      processMap.put("evalDiscreteInputArch", new evalDiscreteInputArch());
      processMap.put("runLocalSearchBinaryInput", new runLocalSearchBinaryInput());
      processMap.put("runLocalSearchDiscreteInput", new runLocalSearchDiscreteInput());
      processMap.put("getOrbitList", new getOrbitList());
      processMap.put("getInstrumentList", new getInstrumentList());
      processMap.put("getObjectiveList", new getObjectiveList());
      processMap.put("getSubobjectiveList", new getSubobjectiveList());
      processMap.put("getInstrumentsForObjective", new getInstrumentsForObjective());
      processMap.put("getInstrumentsForPanel", new getInstrumentsForPanel());
      processMap.put("getCritiqueBinaryInputArch", new getCritiqueBinaryInputArch());
      processMap.put("getCritiqueDiscreteInputArch", new getCritiqueDiscreteInputArch());
      processMap.put("getArchitectureScoreExplanation", new getArchitectureScoreExplanation());
      processMap.put("getPanelScoreExplanation", new getPanelScoreExplanation());
      processMap.put("getObjectiveScoreExplanation", new getObjectiveScoreExplanation());
      processMap.put("isGARunning", new isGARunning());
      processMap.put("stopGA", new stopGA());
      processMap.put("startGABinaryInput", new startGABinaryInput());
      processMap.put("startGADiscreteInput", new startGADiscreteInput());
      processMap.put("getArchScienceInformationBinaryInput", new getArchScienceInformationBinaryInput());
      processMap.put("getArchCostInformationBinaryInput", new getArchCostInformationBinaryInput());
      processMap.put("getSubscoreDetailsBinaryInput", new getSubscoreDetailsBinaryInput());
      processMap.put("getArchScienceInformationDiscreteInput", new getArchScienceInformationDiscreteInput());
      processMap.put("getArchCostInformationDiscreteInput", new getArchCostInformationDiscreteInput());
      processMap.put("getSubscoreDetailsDiscreteInput", new getSubscoreDetailsDiscreteInput());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class evalBinaryInputArch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, evalBinaryInputArch_args, BinaryInputArchitecture> {
      public evalBinaryInputArch() {
        super("evalBinaryInputArch");
      }

      public evalBinaryInputArch_args getEmptyArgsInstance() {
        return new evalBinaryInputArch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<BinaryInputArchitecture> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<BinaryInputArchitecture>() { 
          public void onComplete(BinaryInputArchitecture o) {
            evalBinaryInputArch_result result = new evalBinaryInputArch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            evalBinaryInputArch_result result = new evalBinaryInputArch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, evalBinaryInputArch_args args, org.apache.thrift.async.AsyncMethodCallback<BinaryInputArchitecture> resultHandler) throws org.apache.thrift.TException {
        iface.evalBinaryInputArch(args.problem, args.inputs,resultHandler);
      }
    }

    public static class evalDiscreteInputArch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, evalDiscreteInputArch_args, DiscreteInputArchitecture> {
      public evalDiscreteInputArch() {
        super("evalDiscreteInputArch");
      }

      public evalDiscreteInputArch_args getEmptyArgsInstance() {
        return new evalDiscreteInputArch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DiscreteInputArchitecture> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DiscreteInputArchitecture>() { 
          public void onComplete(DiscreteInputArchitecture o) {
            evalDiscreteInputArch_result result = new evalDiscreteInputArch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            evalDiscreteInputArch_result result = new evalDiscreteInputArch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, evalDiscreteInputArch_args args, org.apache.thrift.async.AsyncMethodCallback<DiscreteInputArchitecture> resultHandler) throws org.apache.thrift.TException {
        iface.evalDiscreteInputArch(args.problem, args.inputs,resultHandler);
      }
    }

    public static class runLocalSearchBinaryInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runLocalSearchBinaryInput_args, java.util.List<BinaryInputArchitecture>> {
      public runLocalSearchBinaryInput() {
        super("runLocalSearchBinaryInput");
      }

      public runLocalSearchBinaryInput_args getEmptyArgsInstance() {
        return new runLocalSearchBinaryInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<BinaryInputArchitecture>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<BinaryInputArchitecture>>() { 
          public void onComplete(java.util.List<BinaryInputArchitecture> o) {
            runLocalSearchBinaryInput_result result = new runLocalSearchBinaryInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            runLocalSearchBinaryInput_result result = new runLocalSearchBinaryInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runLocalSearchBinaryInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<BinaryInputArchitecture>> resultHandler) throws org.apache.thrift.TException {
        iface.runLocalSearchBinaryInput(args.problem, args.arch,resultHandler);
      }
    }

    public static class runLocalSearchDiscreteInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runLocalSearchDiscreteInput_args, java.util.List<DiscreteInputArchitecture>> {
      public runLocalSearchDiscreteInput() {
        super("runLocalSearchDiscreteInput");
      }

      public runLocalSearchDiscreteInput_args getEmptyArgsInstance() {
        return new runLocalSearchDiscreteInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<DiscreteInputArchitecture>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<DiscreteInputArchitecture>>() { 
          public void onComplete(java.util.List<DiscreteInputArchitecture> o) {
            runLocalSearchDiscreteInput_result result = new runLocalSearchDiscreteInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            runLocalSearchDiscreteInput_result result = new runLocalSearchDiscreteInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runLocalSearchDiscreteInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<DiscreteInputArchitecture>> resultHandler) throws org.apache.thrift.TException {
        iface.runLocalSearchDiscreteInput(args.problem, args.arch,resultHandler);
      }
    }

    public static class getOrbitList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrbitList_args, java.util.List<String>> {
      public getOrbitList() {
        super("getOrbitList");
      }

      public getOrbitList_args getEmptyArgsInstance() {
        return new getOrbitList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getOrbitList_result result = new getOrbitList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getOrbitList_result result = new getOrbitList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrbitList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getOrbitList(args.problem,resultHandler);
      }
    }

    public static class getInstrumentList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInstrumentList_args, java.util.List<String>> {
      public getInstrumentList() {
        super("getInstrumentList");
      }

      public getInstrumentList_args getEmptyArgsInstance() {
        return new getInstrumentList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getInstrumentList_result result = new getInstrumentList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getInstrumentList_result result = new getInstrumentList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInstrumentList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getInstrumentList(args.problem,resultHandler);
      }
    }

    public static class getObjectiveList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getObjectiveList_args, java.util.List<String>> {
      public getObjectiveList() {
        super("getObjectiveList");
      }

      public getObjectiveList_args getEmptyArgsInstance() {
        return new getObjectiveList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getObjectiveList_result result = new getObjectiveList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getObjectiveList_result result = new getObjectiveList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getObjectiveList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getObjectiveList(args.problem,resultHandler);
      }
    }

    public static class getSubobjectiveList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubobjectiveList_args, java.util.List<String>> {
      public getSubobjectiveList() {
        super("getSubobjectiveList");
      }

      public getSubobjectiveList_args getEmptyArgsInstance() {
        return new getSubobjectiveList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getSubobjectiveList_result result = new getSubobjectiveList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSubobjectiveList_result result = new getSubobjectiveList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubobjectiveList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getSubobjectiveList(args.problem,resultHandler);
      }
    }

    public static class getInstrumentsForObjective<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInstrumentsForObjective_args, java.util.List<String>> {
      public getInstrumentsForObjective() {
        super("getInstrumentsForObjective");
      }

      public getInstrumentsForObjective_args getEmptyArgsInstance() {
        return new getInstrumentsForObjective_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getInstrumentsForObjective_result result = new getInstrumentsForObjective_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getInstrumentsForObjective_result result = new getInstrumentsForObjective_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInstrumentsForObjective_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getInstrumentsForObjective(args.problem, args.objective,resultHandler);
      }
    }

    public static class getInstrumentsForPanel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInstrumentsForPanel_args, java.util.List<String>> {
      public getInstrumentsForPanel() {
        super("getInstrumentsForPanel");
      }

      public getInstrumentsForPanel_args getEmptyArgsInstance() {
        return new getInstrumentsForPanel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getInstrumentsForPanel_result result = new getInstrumentsForPanel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getInstrumentsForPanel_result result = new getInstrumentsForPanel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInstrumentsForPanel_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getInstrumentsForPanel(args.problem, args.panel,resultHandler);
      }
    }

    public static class getCritiqueBinaryInputArch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCritiqueBinaryInputArch_args, java.util.List<String>> {
      public getCritiqueBinaryInputArch() {
        super("getCritiqueBinaryInputArch");
      }

      public getCritiqueBinaryInputArch_args getEmptyArgsInstance() {
        return new getCritiqueBinaryInputArch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getCritiqueBinaryInputArch_result result = new getCritiqueBinaryInputArch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCritiqueBinaryInputArch_result result = new getCritiqueBinaryInputArch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCritiqueBinaryInputArch_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getCritiqueBinaryInputArch(args.problem, args.inputs,resultHandler);
      }
    }

    public static class getCritiqueDiscreteInputArch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCritiqueDiscreteInputArch_args, java.util.List<String>> {
      public getCritiqueDiscreteInputArch() {
        super("getCritiqueDiscreteInputArch");
      }

      public getCritiqueDiscreteInputArch_args getEmptyArgsInstance() {
        return new getCritiqueDiscreteInputArch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>>() {
          public void onComplete(java.util.List<String> o) {
            getCritiqueDiscreteInputArch_result result = new getCritiqueDiscreteInputArch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCritiqueDiscreteInputArch_result result = new getCritiqueDiscreteInputArch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCritiqueDiscreteInputArch_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<String>> resultHandler) throws org.apache.thrift.TException {
        iface.getCritiqueDiscreteInputArch(args.problem, args.inputs,resultHandler);
      }
    }

    public static class getArchitectureScoreExplanation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArchitectureScoreExplanation_args, java.util.List<ObjectiveSatisfaction>> {
      public getArchitectureScoreExplanation() {
        super("getArchitectureScoreExplanation");
      }

      public getArchitectureScoreExplanation_args getEmptyArgsInstance() {
        return new getArchitectureScoreExplanation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>>() { 
          public void onComplete(java.util.List<ObjectiveSatisfaction> o) {
            getArchitectureScoreExplanation_result result = new getArchitectureScoreExplanation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getArchitectureScoreExplanation_result result = new getArchitectureScoreExplanation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArchitectureScoreExplanation_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException {
        iface.getArchitectureScoreExplanation(args.problem, args.arch,resultHandler);
      }
    }

    public static class getPanelScoreExplanation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPanelScoreExplanation_args, java.util.List<ObjectiveSatisfaction>> {
      public getPanelScoreExplanation() {
        super("getPanelScoreExplanation");
      }

      public getPanelScoreExplanation_args getEmptyArgsInstance() {
        return new getPanelScoreExplanation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>>() { 
          public void onComplete(java.util.List<ObjectiveSatisfaction> o) {
            getPanelScoreExplanation_result result = new getPanelScoreExplanation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPanelScoreExplanation_result result = new getPanelScoreExplanation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPanelScoreExplanation_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException {
        iface.getPanelScoreExplanation(args.problem, args.arch, args.panel,resultHandler);
      }
    }

    public static class getObjectiveScoreExplanation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getObjectiveScoreExplanation_args, java.util.List<ObjectiveSatisfaction>> {
      public getObjectiveScoreExplanation() {
        super("getObjectiveScoreExplanation");
      }

      public getObjectiveScoreExplanation_args getEmptyArgsInstance() {
        return new getObjectiveScoreExplanation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>>() { 
          public void onComplete(java.util.List<ObjectiveSatisfaction> o) {
            getObjectiveScoreExplanation_result result = new getObjectiveScoreExplanation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getObjectiveScoreExplanation_result result = new getObjectiveScoreExplanation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getObjectiveScoreExplanation_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ObjectiveSatisfaction>> resultHandler) throws org.apache.thrift.TException {
        iface.getObjectiveScoreExplanation(args.problem, args.arch, args.objective,resultHandler);
      }
    }

    public static class isGARunning<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isGARunning_args, Boolean> {
      public isGARunning() {
        super("isGARunning");
      }

      public isGARunning_args getEmptyArgsInstance() {
        return new isGARunning_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            isGARunning_result result = new isGARunning_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isGARunning_result result = new isGARunning_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isGARunning_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.isGARunning(args.id,resultHandler);
      }
    }

    public static class stopGA<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopGA_args, Integer> {
      public stopGA() {
        super("stopGA");
      }

      public stopGA_args getEmptyArgsInstance() {
        return new stopGA_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            stopGA_result result = new stopGA_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            stopGA_result result = new stopGA_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stopGA_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
        iface.stopGA(args.id,resultHandler);
      }
    }

    public static class startGABinaryInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startGABinaryInput_args, String> {
      public startGABinaryInput() {
        super("startGABinaryInput");
      }

      public startGABinaryInput_args getEmptyArgsInstance() {
        return new startGABinaryInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            startGABinaryInput_result result = new startGABinaryInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            startGABinaryInput_result result = new startGABinaryInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startGABinaryInput_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.startGABinaryInput(args.problem, args.dataset, args.username,resultHandler);
      }
    }

    public static class startGADiscreteInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startGADiscreteInput_args, String> {
      public startGADiscreteInput() {
        super("startGADiscreteInput");
      }

      public startGADiscreteInput_args getEmptyArgsInstance() {
        return new startGADiscreteInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            startGADiscreteInput_result result = new startGADiscreteInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            startGADiscreteInput_result result = new startGADiscreteInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startGADiscreteInput_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.startGADiscreteInput(args.problem, args.dataset, args.username,resultHandler);
      }
    }

    public static class getArchScienceInformationBinaryInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArchScienceInformationBinaryInput_args, java.util.List<SubscoreInformation>> {
      public getArchScienceInformationBinaryInput() {
        super("getArchScienceInformationBinaryInput");
      }

      public getArchScienceInformationBinaryInput_args getEmptyArgsInstance() {
        return new getArchScienceInformationBinaryInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>>() { 
          public void onComplete(java.util.List<SubscoreInformation> o) {
            getArchScienceInformationBinaryInput_result result = new getArchScienceInformationBinaryInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getArchScienceInformationBinaryInput_result result = new getArchScienceInformationBinaryInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArchScienceInformationBinaryInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler) throws org.apache.thrift.TException {
        iface.getArchScienceInformationBinaryInput(args.problem, args.arch,resultHandler);
      }
    }

    public static class getArchCostInformationBinaryInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArchCostInformationBinaryInput_args, java.util.List<MissionCostInformation>> {
      public getArchCostInformationBinaryInput() {
        super("getArchCostInformationBinaryInput");
      }

      public getArchCostInformationBinaryInput_args getEmptyArgsInstance() {
        return new getArchCostInformationBinaryInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>>() { 
          public void onComplete(java.util.List<MissionCostInformation> o) {
            getArchCostInformationBinaryInput_result result = new getArchCostInformationBinaryInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getArchCostInformationBinaryInput_result result = new getArchCostInformationBinaryInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArchCostInformationBinaryInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler) throws org.apache.thrift.TException {
        iface.getArchCostInformationBinaryInput(args.problem, args.arch,resultHandler);
      }
    }

    public static class getSubscoreDetailsBinaryInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubscoreDetailsBinaryInput_args, SubobjectiveDetails> {
      public getSubscoreDetailsBinaryInput() {
        super("getSubscoreDetailsBinaryInput");
      }

      public getSubscoreDetailsBinaryInput_args getEmptyArgsInstance() {
        return new getSubscoreDetailsBinaryInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails>() { 
          public void onComplete(SubobjectiveDetails o) {
            getSubscoreDetailsBinaryInput_result result = new getSubscoreDetailsBinaryInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSubscoreDetailsBinaryInput_result result = new getSubscoreDetailsBinaryInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubscoreDetailsBinaryInput_args args, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler) throws org.apache.thrift.TException {
        iface.getSubscoreDetailsBinaryInput(args.problem, args.arch, args.subobj,resultHandler);
      }
    }

    public static class getArchScienceInformationDiscreteInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArchScienceInformationDiscreteInput_args, java.util.List<SubscoreInformation>> {
      public getArchScienceInformationDiscreteInput() {
        super("getArchScienceInformationDiscreteInput");
      }

      public getArchScienceInformationDiscreteInput_args getEmptyArgsInstance() {
        return new getArchScienceInformationDiscreteInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>>() { 
          public void onComplete(java.util.List<SubscoreInformation> o) {
            getArchScienceInformationDiscreteInput_result result = new getArchScienceInformationDiscreteInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getArchScienceInformationDiscreteInput_result result = new getArchScienceInformationDiscreteInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArchScienceInformationDiscreteInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SubscoreInformation>> resultHandler) throws org.apache.thrift.TException {
        iface.getArchScienceInformationDiscreteInput(args.problem, args.arch,resultHandler);
      }
    }

    public static class getArchCostInformationDiscreteInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArchCostInformationDiscreteInput_args, java.util.List<MissionCostInformation>> {
      public getArchCostInformationDiscreteInput() {
        super("getArchCostInformationDiscreteInput");
      }

      public getArchCostInformationDiscreteInput_args getEmptyArgsInstance() {
        return new getArchCostInformationDiscreteInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>>() { 
          public void onComplete(java.util.List<MissionCostInformation> o) {
            getArchCostInformationDiscreteInput_result result = new getArchCostInformationDiscreteInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getArchCostInformationDiscreteInput_result result = new getArchCostInformationDiscreteInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArchCostInformationDiscreteInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MissionCostInformation>> resultHandler) throws org.apache.thrift.TException {
        iface.getArchCostInformationDiscreteInput(args.problem, args.arch,resultHandler);
      }
    }

    public static class getSubscoreDetailsDiscreteInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubscoreDetailsDiscreteInput_args, SubobjectiveDetails> {
      public getSubscoreDetailsDiscreteInput() {
        super("getSubscoreDetailsDiscreteInput");
      }

      public getSubscoreDetailsDiscreteInput_args getEmptyArgsInstance() {
        return new getSubscoreDetailsDiscreteInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails>() { 
          public void onComplete(SubobjectiveDetails o) {
            getSubscoreDetailsDiscreteInput_result result = new getSubscoreDetailsDiscreteInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSubscoreDetailsDiscreteInput_result result = new getSubscoreDetailsDiscreteInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubscoreDetailsDiscreteInput_args args, org.apache.thrift.async.AsyncMethodCallback<SubobjectiveDetails> resultHandler) throws org.apache.thrift.TException {
        iface.getSubscoreDetailsDiscreteInput(args.problem, args.arch, args.subobj,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class evalBinaryInputArch_args implements org.apache.thrift.TBase<evalBinaryInputArch_args, evalBinaryInputArch_args._Fields>, java.io.Serializable, Cloneable, Comparable<evalBinaryInputArch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evalBinaryInputArch_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new evalBinaryInputArch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new evalBinaryInputArch_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<Boolean> inputs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      INPUTS((short)2, "inputs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // INPUTS
            return INPUTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUTS, new org.apache.thrift.meta_data.FieldMetaData("inputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evalBinaryInputArch_args.class, metaDataMap);
    }

    public evalBinaryInputArch_args() {
    }

    public evalBinaryInputArch_args(
      String problem,
      java.util.List<Boolean> inputs)
    {
      this();
      this.problem = problem;
      this.inputs = inputs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evalBinaryInputArch_args(evalBinaryInputArch_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetInputs()) {
        java.util.List<Boolean> __this__inputs = new java.util.ArrayList<Boolean>(other.inputs);
        this.inputs = __this__inputs;
      }
    }

    public evalBinaryInputArch_args deepCopy() {
      return new evalBinaryInputArch_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.inputs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public evalBinaryInputArch_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getInputsSize() {
      return (this.inputs == null) ? 0 : this.inputs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Boolean> getInputsIterator() {
      return (this.inputs == null) ? null : this.inputs.iterator();
    }

    public void addToInputs(boolean elem) {
      if (this.inputs == null) {
        this.inputs = new java.util.ArrayList<Boolean>();
      }
      this.inputs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Boolean> getInputs() {
      return this.inputs;
    }

    public evalBinaryInputArch_args setInputs(@org.apache.thrift.annotation.Nullable java.util.List<Boolean> inputs) {
      this.inputs = inputs;
      return this;
    }

    public void unsetInputs() {
      this.inputs = null;
    }

    /** Returns true if field inputs is set (has been assigned a value) and false otherwise */
    public boolean isSetInputs() {
      return this.inputs != null;
    }

    public void setInputsIsSet(boolean value) {
      if (!value) {
        this.inputs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case INPUTS:
        if (value == null) {
          unsetInputs();
        } else {
          setInputs((java.util.List<Boolean>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case INPUTS:
        return getInputs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case INPUTS:
        return isSetInputs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evalBinaryInputArch_args)
        return this.equals((evalBinaryInputArch_args)that);
      return false;
    }

    public boolean equals(evalBinaryInputArch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_inputs = true && this.isSetInputs();
      boolean that_present_inputs = true && that.isSetInputs();
      if (this_present_inputs || that_present_inputs) {
        if (!(this_present_inputs && that_present_inputs))
          return false;
        if (!this.inputs.equals(that.inputs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputs()) ? 131071 : 524287);
      if (isSetInputs())
        hashCode = hashCode * 8191 + inputs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(evalBinaryInputArch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputs()).compareTo(other.isSetInputs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputs, other.inputs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evalBinaryInputArch_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputs:");
      if (this.inputs == null) {
        sb.append("null");
      } else {
        sb.append(this.inputs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evalBinaryInputArch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalBinaryInputArch_argsStandardScheme getScheme() {
        return new evalBinaryInputArch_argsStandardScheme();
      }
    }

    private static class evalBinaryInputArch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<evalBinaryInputArch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evalBinaryInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                  struct.inputs = new java.util.ArrayList<Boolean>(_list134.size);
                  boolean _elem135;
                  for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                  {
                    _elem135 = iprot.readBool();
                    struct.inputs.add(_elem135);
                  }
                  iprot.readListEnd();
                }
                struct.setInputsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evalBinaryInputArch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.inputs != null) {
          oprot.writeFieldBegin(INPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.inputs.size()));
            for (boolean _iter137 : struct.inputs)
            {
              oprot.writeBool(_iter137);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evalBinaryInputArch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalBinaryInputArch_argsTupleScheme getScheme() {
        return new evalBinaryInputArch_argsTupleScheme();
      }
    }

    private static class evalBinaryInputArch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<evalBinaryInputArch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evalBinaryInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetInputs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetInputs()) {
          {
            oprot.writeI32(struct.inputs.size());
            for (boolean _iter138 : struct.inputs)
            {
              oprot.writeBool(_iter138);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evalBinaryInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.inputs = new java.util.ArrayList<Boolean>(_list139.size);
            boolean _elem140;
            for (int _i141 = 0; _i141 < _list139.size; ++_i141)
            {
              _elem140 = iprot.readBool();
              struct.inputs.add(_elem140);
            }
          }
          struct.setInputsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class evalBinaryInputArch_result implements org.apache.thrift.TBase<evalBinaryInputArch_result, evalBinaryInputArch_result._Fields>, java.io.Serializable, Cloneable, Comparable<evalBinaryInputArch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evalBinaryInputArch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new evalBinaryInputArch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new evalBinaryInputArch_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evalBinaryInputArch_result.class, metaDataMap);
    }

    public evalBinaryInputArch_result() {
    }

    public evalBinaryInputArch_result(
      BinaryInputArchitecture success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evalBinaryInputArch_result(evalBinaryInputArch_result other) {
      if (other.isSetSuccess()) {
        this.success = new BinaryInputArchitecture(other.success);
      }
    }

    public evalBinaryInputArch_result deepCopy() {
      return new evalBinaryInputArch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getSuccess() {
      return this.success;
    }

    public evalBinaryInputArch_result setSuccess(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BinaryInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evalBinaryInputArch_result)
        return this.equals((evalBinaryInputArch_result)that);
      return false;
    }

    public boolean equals(evalBinaryInputArch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(evalBinaryInputArch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evalBinaryInputArch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evalBinaryInputArch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalBinaryInputArch_resultStandardScheme getScheme() {
        return new evalBinaryInputArch_resultStandardScheme();
      }
    }

    private static class evalBinaryInputArch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<evalBinaryInputArch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evalBinaryInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BinaryInputArchitecture();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evalBinaryInputArch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evalBinaryInputArch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalBinaryInputArch_resultTupleScheme getScheme() {
        return new evalBinaryInputArch_resultTupleScheme();
      }
    }

    private static class evalBinaryInputArch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<evalBinaryInputArch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evalBinaryInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evalBinaryInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BinaryInputArchitecture();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class evalDiscreteInputArch_args implements org.apache.thrift.TBase<evalDiscreteInputArch_args, evalDiscreteInputArch_args._Fields>, java.io.Serializable, Cloneable, Comparable<evalDiscreteInputArch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evalDiscreteInputArch_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new evalDiscreteInputArch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new evalDiscreteInputArch_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<Integer> inputs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      INPUTS((short)2, "inputs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // INPUTS
            return INPUTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUTS, new org.apache.thrift.meta_data.FieldMetaData("inputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evalDiscreteInputArch_args.class, metaDataMap);
    }

    public evalDiscreteInputArch_args() {
    }

    public evalDiscreteInputArch_args(
      String problem,
      java.util.List<Integer> inputs)
    {
      this();
      this.problem = problem;
      this.inputs = inputs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evalDiscreteInputArch_args(evalDiscreteInputArch_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetInputs()) {
        java.util.List<Integer> __this__inputs = new java.util.ArrayList<Integer>(other.inputs.size());
        for (Integer other_element : other.inputs) {
          __this__inputs.add(other_element);
        }
        this.inputs = __this__inputs;
      }
    }

    public evalDiscreteInputArch_args deepCopy() {
      return new evalDiscreteInputArch_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.inputs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public evalDiscreteInputArch_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getInputsSize() {
      return (this.inputs == null) ? 0 : this.inputs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Integer> getInputsIterator() {
      return (this.inputs == null) ? null : this.inputs.iterator();
    }

    public void addToInputs(int elem) {
      if (this.inputs == null) {
        this.inputs = new java.util.ArrayList<Integer>();
      }
      this.inputs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Integer> getInputs() {
      return this.inputs;
    }

    public evalDiscreteInputArch_args setInputs(@org.apache.thrift.annotation.Nullable java.util.List<Integer> inputs) {
      this.inputs = inputs;
      return this;
    }

    public void unsetInputs() {
      this.inputs = null;
    }

    /** Returns true if field inputs is set (has been assigned a value) and false otherwise */
    public boolean isSetInputs() {
      return this.inputs != null;
    }

    public void setInputsIsSet(boolean value) {
      if (!value) {
        this.inputs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case INPUTS:
        if (value == null) {
          unsetInputs();
        } else {
          setInputs((java.util.List<Integer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case INPUTS:
        return getInputs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case INPUTS:
        return isSetInputs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evalDiscreteInputArch_args)
        return this.equals((evalDiscreteInputArch_args)that);
      return false;
    }

    public boolean equals(evalDiscreteInputArch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_inputs = true && this.isSetInputs();
      boolean that_present_inputs = true && that.isSetInputs();
      if (this_present_inputs || that_present_inputs) {
        if (!(this_present_inputs && that_present_inputs))
          return false;
        if (!this.inputs.equals(that.inputs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputs()) ? 131071 : 524287);
      if (isSetInputs())
        hashCode = hashCode * 8191 + inputs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(evalDiscreteInputArch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputs()).compareTo(other.isSetInputs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputs, other.inputs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evalDiscreteInputArch_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputs:");
      if (this.inputs == null) {
        sb.append("null");
      } else {
        sb.append(this.inputs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evalDiscreteInputArch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalDiscreteInputArch_argsStandardScheme getScheme() {
        return new evalDiscreteInputArch_argsStandardScheme();
      }
    }

    private static class evalDiscreteInputArch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<evalDiscreteInputArch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evalDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                  struct.inputs = new java.util.ArrayList<Integer>(_list142.size);
                  int _elem143;
                  for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                  {
                    _elem143 = iprot.readI32();
                    struct.inputs.add(_elem143);
                  }
                  iprot.readListEnd();
                }
                struct.setInputsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evalDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.inputs != null) {
          oprot.writeFieldBegin(INPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.inputs.size()));
            for (int _iter145 : struct.inputs)
            {
              oprot.writeI32(_iter145);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evalDiscreteInputArch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalDiscreteInputArch_argsTupleScheme getScheme() {
        return new evalDiscreteInputArch_argsTupleScheme();
      }
    }

    private static class evalDiscreteInputArch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<evalDiscreteInputArch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evalDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetInputs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetInputs()) {
          {
            oprot.writeI32(struct.inputs.size());
            for (int _iter146 : struct.inputs)
            {
              oprot.writeI32(_iter146);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evalDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list147 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.inputs = new java.util.ArrayList<Integer>(_list147.size);
            int _elem148;
            for (int _i149 = 0; _i149 < _list147.size; ++_i149)
            {
              _elem148 = iprot.readI32();
              struct.inputs.add(_elem148);
            }
          }
          struct.setInputsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class evalDiscreteInputArch_result implements org.apache.thrift.TBase<evalDiscreteInputArch_result, evalDiscreteInputArch_result._Fields>, java.io.Serializable, Cloneable, Comparable<evalDiscreteInputArch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evalDiscreteInputArch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new evalDiscreteInputArch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new evalDiscreteInputArch_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evalDiscreteInputArch_result.class, metaDataMap);
    }

    public evalDiscreteInputArch_result() {
    }

    public evalDiscreteInputArch_result(
      DiscreteInputArchitecture success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evalDiscreteInputArch_result(evalDiscreteInputArch_result other) {
      if (other.isSetSuccess()) {
        this.success = new DiscreteInputArchitecture(other.success);
      }
    }

    public evalDiscreteInputArch_result deepCopy() {
      return new evalDiscreteInputArch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DiscreteInputArchitecture getSuccess() {
      return this.success;
    }

    public evalDiscreteInputArch_result setSuccess(@org.apache.thrift.annotation.Nullable DiscreteInputArchitecture success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DiscreteInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evalDiscreteInputArch_result)
        return this.equals((evalDiscreteInputArch_result)that);
      return false;
    }

    public boolean equals(evalDiscreteInputArch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(evalDiscreteInputArch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evalDiscreteInputArch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evalDiscreteInputArch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalDiscreteInputArch_resultStandardScheme getScheme() {
        return new evalDiscreteInputArch_resultStandardScheme();
      }
    }

    private static class evalDiscreteInputArch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<evalDiscreteInputArch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evalDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DiscreteInputArchitecture();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evalDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evalDiscreteInputArch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public evalDiscreteInputArch_resultTupleScheme getScheme() {
        return new evalDiscreteInputArch_resultTupleScheme();
      }
    }

    private static class evalDiscreteInputArch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<evalDiscreteInputArch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evalDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evalDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DiscreteInputArchitecture();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runLocalSearchBinaryInput_args implements org.apache.thrift.TBase<runLocalSearchBinaryInput_args, runLocalSearchBinaryInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<runLocalSearchBinaryInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runLocalSearchBinaryInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runLocalSearchBinaryInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runLocalSearchBinaryInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runLocalSearchBinaryInput_args.class, metaDataMap);
    }

    public runLocalSearchBinaryInput_args() {
    }

    public runLocalSearchBinaryInput_args(
      String problem,
      BinaryInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runLocalSearchBinaryInput_args(runLocalSearchBinaryInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
    }

    public runLocalSearchBinaryInput_args deepCopy() {
      return new runLocalSearchBinaryInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public runLocalSearchBinaryInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public runLocalSearchBinaryInput_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runLocalSearchBinaryInput_args)
        return this.equals((runLocalSearchBinaryInput_args)that);
      return false;
    }

    public boolean equals(runLocalSearchBinaryInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runLocalSearchBinaryInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runLocalSearchBinaryInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runLocalSearchBinaryInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchBinaryInput_argsStandardScheme getScheme() {
        return new runLocalSearchBinaryInput_argsStandardScheme();
      }
    }

    private static class runLocalSearchBinaryInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<runLocalSearchBinaryInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runLocalSearchBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runLocalSearchBinaryInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runLocalSearchBinaryInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchBinaryInput_argsTupleScheme getScheme() {
        return new runLocalSearchBinaryInput_argsTupleScheme();
      }
    }

    private static class runLocalSearchBinaryInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<runLocalSearchBinaryInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runLocalSearchBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runLocalSearchBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runLocalSearchBinaryInput_result implements org.apache.thrift.TBase<runLocalSearchBinaryInput_result, runLocalSearchBinaryInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<runLocalSearchBinaryInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runLocalSearchBinaryInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runLocalSearchBinaryInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runLocalSearchBinaryInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<BinaryInputArchitecture> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runLocalSearchBinaryInput_result.class, metaDataMap);
    }

    public runLocalSearchBinaryInput_result() {
    }

    public runLocalSearchBinaryInput_result(
      java.util.List<BinaryInputArchitecture> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runLocalSearchBinaryInput_result(runLocalSearchBinaryInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<BinaryInputArchitecture> __this__success = new java.util.ArrayList<BinaryInputArchitecture>(other.success.size());
        for (BinaryInputArchitecture other_element : other.success) {
          __this__success.add(new BinaryInputArchitecture(other_element));
        }
        this.success = __this__success;
      }
    }

    public runLocalSearchBinaryInput_result deepCopy() {
      return new runLocalSearchBinaryInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<BinaryInputArchitecture> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BinaryInputArchitecture elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<BinaryInputArchitecture> getSuccess() {
      return this.success;
    }

    public runLocalSearchBinaryInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<BinaryInputArchitecture> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runLocalSearchBinaryInput_result)
        return this.equals((runLocalSearchBinaryInput_result)that);
      return false;
    }

    public boolean equals(runLocalSearchBinaryInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runLocalSearchBinaryInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runLocalSearchBinaryInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runLocalSearchBinaryInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchBinaryInput_resultStandardScheme getScheme() {
        return new runLocalSearchBinaryInput_resultStandardScheme();
      }
    }

    private static class runLocalSearchBinaryInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<runLocalSearchBinaryInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runLocalSearchBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<BinaryInputArchitecture>(_list150.size);
                  @org.apache.thrift.annotation.Nullable BinaryInputArchitecture _elem151;
                  for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                  {
                    _elem151 = new BinaryInputArchitecture();
                    _elem151.read(iprot);
                    struct.success.add(_elem151);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runLocalSearchBinaryInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BinaryInputArchitecture _iter153 : struct.success)
            {
              _iter153.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runLocalSearchBinaryInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchBinaryInput_resultTupleScheme getScheme() {
        return new runLocalSearchBinaryInput_resultTupleScheme();
      }
    }

    private static class runLocalSearchBinaryInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<runLocalSearchBinaryInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runLocalSearchBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BinaryInputArchitecture _iter154 : struct.success)
            {
              _iter154.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runLocalSearchBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<BinaryInputArchitecture>(_list155.size);
            @org.apache.thrift.annotation.Nullable BinaryInputArchitecture _elem156;
            for (int _i157 = 0; _i157 < _list155.size; ++_i157)
            {
              _elem156 = new BinaryInputArchitecture();
              _elem156.read(iprot);
              struct.success.add(_elem156);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runLocalSearchDiscreteInput_args implements org.apache.thrift.TBase<runLocalSearchDiscreteInput_args, runLocalSearchDiscreteInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<runLocalSearchDiscreteInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runLocalSearchDiscreteInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runLocalSearchDiscreteInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runLocalSearchDiscreteInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runLocalSearchDiscreteInput_args.class, metaDataMap);
    }

    public runLocalSearchDiscreteInput_args() {
    }

    public runLocalSearchDiscreteInput_args(
      String problem,
      DiscreteInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runLocalSearchDiscreteInput_args(runLocalSearchDiscreteInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new DiscreteInputArchitecture(other.arch);
      }
    }

    public runLocalSearchDiscreteInput_args deepCopy() {
      return new runLocalSearchDiscreteInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public runLocalSearchDiscreteInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DiscreteInputArchitecture getArch() {
      return this.arch;
    }

    public runLocalSearchDiscreteInput_args setArch(@org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((DiscreteInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runLocalSearchDiscreteInput_args)
        return this.equals((runLocalSearchDiscreteInput_args)that);
      return false;
    }

    public boolean equals(runLocalSearchDiscreteInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runLocalSearchDiscreteInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runLocalSearchDiscreteInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runLocalSearchDiscreteInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchDiscreteInput_argsStandardScheme getScheme() {
        return new runLocalSearchDiscreteInput_argsStandardScheme();
      }
    }

    private static class runLocalSearchDiscreteInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<runLocalSearchDiscreteInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runLocalSearchDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new DiscreteInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runLocalSearchDiscreteInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runLocalSearchDiscreteInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchDiscreteInput_argsTupleScheme getScheme() {
        return new runLocalSearchDiscreteInput_argsTupleScheme();
      }
    }

    private static class runLocalSearchDiscreteInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<runLocalSearchDiscreteInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runLocalSearchDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runLocalSearchDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new DiscreteInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runLocalSearchDiscreteInput_result implements org.apache.thrift.TBase<runLocalSearchDiscreteInput_result, runLocalSearchDiscreteInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<runLocalSearchDiscreteInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runLocalSearchDiscreteInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runLocalSearchDiscreteInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runLocalSearchDiscreteInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<DiscreteInputArchitecture> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runLocalSearchDiscreteInput_result.class, metaDataMap);
    }

    public runLocalSearchDiscreteInput_result() {
    }

    public runLocalSearchDiscreteInput_result(
      java.util.List<DiscreteInputArchitecture> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runLocalSearchDiscreteInput_result(runLocalSearchDiscreteInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<DiscreteInputArchitecture> __this__success = new java.util.ArrayList<DiscreteInputArchitecture>(other.success.size());
        for (DiscreteInputArchitecture other_element : other.success) {
          __this__success.add(new DiscreteInputArchitecture(other_element));
        }
        this.success = __this__success;
      }
    }

    public runLocalSearchDiscreteInput_result deepCopy() {
      return new runLocalSearchDiscreteInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DiscreteInputArchitecture> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DiscreteInputArchitecture elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DiscreteInputArchitecture> getSuccess() {
      return this.success;
    }

    public runLocalSearchDiscreteInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<DiscreteInputArchitecture> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runLocalSearchDiscreteInput_result)
        return this.equals((runLocalSearchDiscreteInput_result)that);
      return false;
    }

    public boolean equals(runLocalSearchDiscreteInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runLocalSearchDiscreteInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runLocalSearchDiscreteInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runLocalSearchDiscreteInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchDiscreteInput_resultStandardScheme getScheme() {
        return new runLocalSearchDiscreteInput_resultStandardScheme();
      }
    }

    private static class runLocalSearchDiscreteInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<runLocalSearchDiscreteInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runLocalSearchDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<DiscreteInputArchitecture>(_list158.size);
                  @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture _elem159;
                  for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                  {
                    _elem159 = new DiscreteInputArchitecture();
                    _elem159.read(iprot);
                    struct.success.add(_elem159);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runLocalSearchDiscreteInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DiscreteInputArchitecture _iter161 : struct.success)
            {
              _iter161.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runLocalSearchDiscreteInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runLocalSearchDiscreteInput_resultTupleScheme getScheme() {
        return new runLocalSearchDiscreteInput_resultTupleScheme();
      }
    }

    private static class runLocalSearchDiscreteInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<runLocalSearchDiscreteInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runLocalSearchDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DiscreteInputArchitecture _iter162 : struct.success)
            {
              _iter162.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runLocalSearchDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<DiscreteInputArchitecture>(_list163.size);
            @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture _elem164;
            for (int _i165 = 0; _i165 < _list163.size; ++_i165)
            {
              _elem164 = new DiscreteInputArchitecture();
              _elem164.read(iprot);
              struct.success.add(_elem164);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getOrbitList_args implements org.apache.thrift.TBase<getOrbitList_args, getOrbitList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrbitList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrbitList_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrbitList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrbitList_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrbitList_args.class, metaDataMap);
    }

    public getOrbitList_args() {
    }

    public getOrbitList_args(
      String problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrbitList_args(getOrbitList_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
    }

    public getOrbitList_args deepCopy() {
      return new getOrbitList_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getOrbitList_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrbitList_args)
        return this.equals((getOrbitList_args)that);
      return false;
    }

    public boolean equals(getOrbitList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getOrbitList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrbitList_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrbitList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrbitList_argsStandardScheme getScheme() {
        return new getOrbitList_argsStandardScheme();
      }
    }

    private static class getOrbitList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getOrbitList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrbitList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrbitList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrbitList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrbitList_argsTupleScheme getScheme() {
        return new getOrbitList_argsTupleScheme();
      }
    }

    private static class getOrbitList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrbitList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrbitList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrbitList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getOrbitList_result implements org.apache.thrift.TBase<getOrbitList_result, getOrbitList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrbitList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrbitList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrbitList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrbitList_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrbitList_result.class, metaDataMap);
    }

    public getOrbitList_result() {
    }

    public getOrbitList_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrbitList_result(getOrbitList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getOrbitList_result deepCopy() {
      return new getOrbitList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getOrbitList_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrbitList_result)
        return this.equals((getOrbitList_result)that);
      return false;
    }

    public boolean equals(getOrbitList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getOrbitList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrbitList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrbitList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrbitList_resultStandardScheme getScheme() {
        return new getOrbitList_resultStandardScheme();
      }
    }

    private static class getOrbitList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getOrbitList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrbitList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list166.size);
                  @org.apache.thrift.annotation.Nullable String _elem167;
                  for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                  {
                    _elem167 = iprot.readString();
                    struct.success.add(_elem167);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrbitList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter169 : struct.success)
            {
              oprot.writeString(_iter169);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrbitList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrbitList_resultTupleScheme getScheme() {
        return new getOrbitList_resultTupleScheme();
      }
    }

    private static class getOrbitList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrbitList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrbitList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter170 : struct.success)
            {
              oprot.writeString(_iter170);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrbitList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list171.size);
            @org.apache.thrift.annotation.Nullable String _elem172;
            for (int _i173 = 0; _i173 < _list171.size; ++_i173)
            {
              _elem172 = iprot.readString();
              struct.success.add(_elem172);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInstrumentList_args implements org.apache.thrift.TBase<getInstrumentList_args, getInstrumentList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInstrumentList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstrumentList_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInstrumentList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInstrumentList_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstrumentList_args.class, metaDataMap);
    }

    public getInstrumentList_args() {
    }

    public getInstrumentList_args(
      String problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstrumentList_args(getInstrumentList_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
    }

    public getInstrumentList_args deepCopy() {
      return new getInstrumentList_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getInstrumentList_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstrumentList_args)
        return this.equals((getInstrumentList_args)that);
      return false;
    }

    public boolean equals(getInstrumentList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInstrumentList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstrumentList_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstrumentList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentList_argsStandardScheme getScheme() {
        return new getInstrumentList_argsStandardScheme();
      }
    }

    private static class getInstrumentList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInstrumentList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstrumentList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstrumentList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstrumentList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentList_argsTupleScheme getScheme() {
        return new getInstrumentList_argsTupleScheme();
      }
    }

    private static class getInstrumentList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInstrumentList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstrumentList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstrumentList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInstrumentList_result implements org.apache.thrift.TBase<getInstrumentList_result, getInstrumentList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInstrumentList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstrumentList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInstrumentList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInstrumentList_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstrumentList_result.class, metaDataMap);
    }

    public getInstrumentList_result() {
    }

    public getInstrumentList_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstrumentList_result(getInstrumentList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getInstrumentList_result deepCopy() {
      return new getInstrumentList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getInstrumentList_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstrumentList_result)
        return this.equals((getInstrumentList_result)that);
      return false;
    }

    public boolean equals(getInstrumentList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInstrumentList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstrumentList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstrumentList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentList_resultStandardScheme getScheme() {
        return new getInstrumentList_resultStandardScheme();
      }
    }

    private static class getInstrumentList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInstrumentList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstrumentList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list174.size);
                  @org.apache.thrift.annotation.Nullable String _elem175;
                  for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                  {
                    _elem175 = iprot.readString();
                    struct.success.add(_elem175);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstrumentList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter177 : struct.success)
            {
              oprot.writeString(_iter177);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstrumentList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentList_resultTupleScheme getScheme() {
        return new getInstrumentList_resultTupleScheme();
      }
    }

    private static class getInstrumentList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInstrumentList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstrumentList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter178 : struct.success)
            {
              oprot.writeString(_iter178);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstrumentList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list179.size);
            @org.apache.thrift.annotation.Nullable String _elem180;
            for (int _i181 = 0; _i181 < _list179.size; ++_i181)
            {
              _elem180 = iprot.readString();
              struct.success.add(_elem180);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getObjectiveList_args implements org.apache.thrift.TBase<getObjectiveList_args, getObjectiveList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectiveList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectiveList_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getObjectiveList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getObjectiveList_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectiveList_args.class, metaDataMap);
    }

    public getObjectiveList_args() {
    }

    public getObjectiveList_args(
      String problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectiveList_args(getObjectiveList_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
    }

    public getObjectiveList_args deepCopy() {
      return new getObjectiveList_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getObjectiveList_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectiveList_args)
        return this.equals((getObjectiveList_args)that);
      return false;
    }

    public boolean equals(getObjectiveList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getObjectiveList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectiveList_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectiveList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveList_argsStandardScheme getScheme() {
        return new getObjectiveList_argsStandardScheme();
      }
    }

    private static class getObjectiveList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getObjectiveList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectiveList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectiveList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveList_argsTupleScheme getScheme() {
        return new getObjectiveList_argsTupleScheme();
      }
    }

    private static class getObjectiveList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getObjectiveList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getObjectiveList_result implements org.apache.thrift.TBase<getObjectiveList_result, getObjectiveList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectiveList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectiveList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getObjectiveList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getObjectiveList_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectiveList_result.class, metaDataMap);
    }

    public getObjectiveList_result() {
    }

    public getObjectiveList_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectiveList_result(getObjectiveList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getObjectiveList_result deepCopy() {
      return new getObjectiveList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getObjectiveList_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectiveList_result)
        return this.equals((getObjectiveList_result)that);
      return false;
    }

    public boolean equals(getObjectiveList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getObjectiveList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectiveList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectiveList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveList_resultStandardScheme getScheme() {
        return new getObjectiveList_resultStandardScheme();
      }
    }

    private static class getObjectiveList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getObjectiveList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list182.size);
                  @org.apache.thrift.annotation.Nullable String _elem183;
                  for (int _i184 = 0; _i184 < _list182.size; ++_i184)
                  {
                    _elem183 = iprot.readString();
                    struct.success.add(_elem183);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectiveList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter185 : struct.success)
            {
              oprot.writeString(_iter185);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectiveList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveList_resultTupleScheme getScheme() {
        return new getObjectiveList_resultTupleScheme();
      }
    }

    private static class getObjectiveList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getObjectiveList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter186 : struct.success)
            {
              oprot.writeString(_iter186);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list187.size);
            @org.apache.thrift.annotation.Nullable String _elem188;
            for (int _i189 = 0; _i189 < _list187.size; ++_i189)
            {
              _elem188 = iprot.readString();
              struct.success.add(_elem188);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubobjectiveList_args implements org.apache.thrift.TBase<getSubobjectiveList_args, getSubobjectiveList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubobjectiveList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubobjectiveList_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubobjectiveList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubobjectiveList_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubobjectiveList_args.class, metaDataMap);
    }

    public getSubobjectiveList_args() {
    }

    public getSubobjectiveList_args(
      String problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubobjectiveList_args(getSubobjectiveList_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
    }

    public getSubobjectiveList_args deepCopy() {
      return new getSubobjectiveList_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getSubobjectiveList_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubobjectiveList_args)
        return this.equals((getSubobjectiveList_args)that);
      return false;
    }

    public boolean equals(getSubobjectiveList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubobjectiveList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubobjectiveList_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubobjectiveList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubobjectiveList_argsStandardScheme getScheme() {
        return new getSubobjectiveList_argsStandardScheme();
      }
    }

    private static class getSubobjectiveList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubobjectiveList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubobjectiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubobjectiveList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubobjectiveList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubobjectiveList_argsTupleScheme getScheme() {
        return new getSubobjectiveList_argsTupleScheme();
      }
    }

    private static class getSubobjectiveList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubobjectiveList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubobjectiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubobjectiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubobjectiveList_result implements org.apache.thrift.TBase<getSubobjectiveList_result, getSubobjectiveList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubobjectiveList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubobjectiveList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubobjectiveList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubobjectiveList_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubobjectiveList_result.class, metaDataMap);
    }

    public getSubobjectiveList_result() {
    }

    public getSubobjectiveList_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubobjectiveList_result(getSubobjectiveList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getSubobjectiveList_result deepCopy() {
      return new getSubobjectiveList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getSubobjectiveList_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubobjectiveList_result)
        return this.equals((getSubobjectiveList_result)that);
      return false;
    }

    public boolean equals(getSubobjectiveList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubobjectiveList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubobjectiveList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubobjectiveList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubobjectiveList_resultStandardScheme getScheme() {
        return new getSubobjectiveList_resultStandardScheme();
      }
    }

    private static class getSubobjectiveList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubobjectiveList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubobjectiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list190.size);
                  @org.apache.thrift.annotation.Nullable String _elem191;
                  for (int _i192 = 0; _i192 < _list190.size; ++_i192)
                  {
                    _elem191 = iprot.readString();
                    struct.success.add(_elem191);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubobjectiveList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter193 : struct.success)
            {
              oprot.writeString(_iter193);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubobjectiveList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubobjectiveList_resultTupleScheme getScheme() {
        return new getSubobjectiveList_resultTupleScheme();
      }
    }

    private static class getSubobjectiveList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubobjectiveList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubobjectiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter194 : struct.success)
            {
              oprot.writeString(_iter194);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubobjectiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list195.size);
            @org.apache.thrift.annotation.Nullable String _elem196;
            for (int _i197 = 0; _i197 < _list195.size; ++_i197)
            {
              _elem196 = iprot.readString();
              struct.success.add(_elem196);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInstrumentsForObjective_args implements org.apache.thrift.TBase<getInstrumentsForObjective_args, getInstrumentsForObjective_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInstrumentsForObjective_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstrumentsForObjective_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OBJECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("objective", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInstrumentsForObjective_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInstrumentsForObjective_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable String objective; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      OBJECTIVE((short)2, "objective");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // OBJECTIVE
            return OBJECTIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECTIVE, new org.apache.thrift.meta_data.FieldMetaData("objective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstrumentsForObjective_args.class, metaDataMap);
    }

    public getInstrumentsForObjective_args() {
    }

    public getInstrumentsForObjective_args(
      String problem,
      String objective)
    {
      this();
      this.problem = problem;
      this.objective = objective;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstrumentsForObjective_args(getInstrumentsForObjective_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetObjective()) {
        this.objective = other.objective;
      }
    }

    public getInstrumentsForObjective_args deepCopy() {
      return new getInstrumentsForObjective_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.objective = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getInstrumentsForObjective_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getObjective() {
      return this.objective;
    }

    public getInstrumentsForObjective_args setObjective(@org.apache.thrift.annotation.Nullable String objective) {
      this.objective = objective;
      return this;
    }

    public void unsetObjective() {
      this.objective = null;
    }

    /** Returns true if field objective is set (has been assigned a value) and false otherwise */
    public boolean isSetObjective() {
      return this.objective != null;
    }

    public void setObjectiveIsSet(boolean value) {
      if (!value) {
        this.objective = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case OBJECTIVE:
        if (value == null) {
          unsetObjective();
        } else {
          setObjective((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case OBJECTIVE:
        return getObjective();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case OBJECTIVE:
        return isSetObjective();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstrumentsForObjective_args)
        return this.equals((getInstrumentsForObjective_args)that);
      return false;
    }

    public boolean equals(getInstrumentsForObjective_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_objective = true && this.isSetObjective();
      boolean that_present_objective = true && that.isSetObjective();
      if (this_present_objective || that_present_objective) {
        if (!(this_present_objective && that_present_objective))
          return false;
        if (!this.objective.equals(that.objective))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetObjective()) ? 131071 : 524287);
      if (isSetObjective())
        hashCode = hashCode * 8191 + objective.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInstrumentsForObjective_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObjective()).compareTo(other.isSetObjective());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjective()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objective, other.objective);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstrumentsForObjective_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("objective:");
      if (this.objective == null) {
        sb.append("null");
      } else {
        sb.append(this.objective);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstrumentsForObjective_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForObjective_argsStandardScheme getScheme() {
        return new getInstrumentsForObjective_argsStandardScheme();
      }
    }

    private static class getInstrumentsForObjective_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInstrumentsForObjective_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstrumentsForObjective_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OBJECTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.objective = iprot.readString();
                struct.setObjectiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstrumentsForObjective_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.objective != null) {
          oprot.writeFieldBegin(OBJECTIVE_FIELD_DESC);
          oprot.writeString(struct.objective);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstrumentsForObjective_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForObjective_argsTupleScheme getScheme() {
        return new getInstrumentsForObjective_argsTupleScheme();
      }
    }

    private static class getInstrumentsForObjective_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInstrumentsForObjective_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForObjective_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetObjective()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetObjective()) {
          oprot.writeString(struct.objective);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForObjective_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.objective = iprot.readString();
          struct.setObjectiveIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInstrumentsForObjective_result implements org.apache.thrift.TBase<getInstrumentsForObjective_result, getInstrumentsForObjective_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInstrumentsForObjective_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstrumentsForObjective_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInstrumentsForObjective_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInstrumentsForObjective_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstrumentsForObjective_result.class, metaDataMap);
    }

    public getInstrumentsForObjective_result() {
    }

    public getInstrumentsForObjective_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstrumentsForObjective_result(getInstrumentsForObjective_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getInstrumentsForObjective_result deepCopy() {
      return new getInstrumentsForObjective_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getInstrumentsForObjective_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstrumentsForObjective_result)
        return this.equals((getInstrumentsForObjective_result)that);
      return false;
    }

    public boolean equals(getInstrumentsForObjective_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInstrumentsForObjective_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstrumentsForObjective_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstrumentsForObjective_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForObjective_resultStandardScheme getScheme() {
        return new getInstrumentsForObjective_resultStandardScheme();
      }
    }

    private static class getInstrumentsForObjective_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInstrumentsForObjective_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstrumentsForObjective_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list198 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list198.size);
                  @org.apache.thrift.annotation.Nullable String _elem199;
                  for (int _i200 = 0; _i200 < _list198.size; ++_i200)
                  {
                    _elem199 = iprot.readString();
                    struct.success.add(_elem199);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstrumentsForObjective_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter201 : struct.success)
            {
              oprot.writeString(_iter201);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstrumentsForObjective_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForObjective_resultTupleScheme getScheme() {
        return new getInstrumentsForObjective_resultTupleScheme();
      }
    }

    private static class getInstrumentsForObjective_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInstrumentsForObjective_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForObjective_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter202 : struct.success)
            {
              oprot.writeString(_iter202);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForObjective_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list203.size);
            @org.apache.thrift.annotation.Nullable String _elem204;
            for (int _i205 = 0; _i205 < _list203.size; ++_i205)
            {
              _elem204 = iprot.readString();
              struct.success.add(_elem204);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInstrumentsForPanel_args implements org.apache.thrift.TBase<getInstrumentsForPanel_args, getInstrumentsForPanel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInstrumentsForPanel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstrumentsForPanel_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PANEL_FIELD_DESC = new org.apache.thrift.protocol.TField("panel", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInstrumentsForPanel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInstrumentsForPanel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable String panel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      PANEL((short)2, "panel");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // PANEL
            return PANEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PANEL, new org.apache.thrift.meta_data.FieldMetaData("panel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstrumentsForPanel_args.class, metaDataMap);
    }

    public getInstrumentsForPanel_args() {
    }

    public getInstrumentsForPanel_args(
      String problem,
      String panel)
    {
      this();
      this.problem = problem;
      this.panel = panel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstrumentsForPanel_args(getInstrumentsForPanel_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetPanel()) {
        this.panel = other.panel;
      }
    }

    public getInstrumentsForPanel_args deepCopy() {
      return new getInstrumentsForPanel_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.panel = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getInstrumentsForPanel_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPanel() {
      return this.panel;
    }

    public getInstrumentsForPanel_args setPanel(@org.apache.thrift.annotation.Nullable String panel) {
      this.panel = panel;
      return this;
    }

    public void unsetPanel() {
      this.panel = null;
    }

    /** Returns true if field panel is set (has been assigned a value) and false otherwise */
    public boolean isSetPanel() {
      return this.panel != null;
    }

    public void setPanelIsSet(boolean value) {
      if (!value) {
        this.panel = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case PANEL:
        if (value == null) {
          unsetPanel();
        } else {
          setPanel((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case PANEL:
        return getPanel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case PANEL:
        return isSetPanel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstrumentsForPanel_args)
        return this.equals((getInstrumentsForPanel_args)that);
      return false;
    }

    public boolean equals(getInstrumentsForPanel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_panel = true && this.isSetPanel();
      boolean that_present_panel = true && that.isSetPanel();
      if (this_present_panel || that_present_panel) {
        if (!(this_present_panel && that_present_panel))
          return false;
        if (!this.panel.equals(that.panel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetPanel()) ? 131071 : 524287);
      if (isSetPanel())
        hashCode = hashCode * 8191 + panel.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInstrumentsForPanel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPanel()).compareTo(other.isSetPanel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.panel, other.panel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstrumentsForPanel_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("panel:");
      if (this.panel == null) {
        sb.append("null");
      } else {
        sb.append(this.panel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstrumentsForPanel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForPanel_argsStandardScheme getScheme() {
        return new getInstrumentsForPanel_argsStandardScheme();
      }
    }

    private static class getInstrumentsForPanel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInstrumentsForPanel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstrumentsForPanel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PANEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.panel = iprot.readString();
                struct.setPanelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstrumentsForPanel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.panel != null) {
          oprot.writeFieldBegin(PANEL_FIELD_DESC);
          oprot.writeString(struct.panel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstrumentsForPanel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForPanel_argsTupleScheme getScheme() {
        return new getInstrumentsForPanel_argsTupleScheme();
      }
    }

    private static class getInstrumentsForPanel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInstrumentsForPanel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForPanel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetPanel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetPanel()) {
          oprot.writeString(struct.panel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForPanel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.panel = iprot.readString();
          struct.setPanelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInstrumentsForPanel_result implements org.apache.thrift.TBase<getInstrumentsForPanel_result, getInstrumentsForPanel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInstrumentsForPanel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstrumentsForPanel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInstrumentsForPanel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInstrumentsForPanel_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstrumentsForPanel_result.class, metaDataMap);
    }

    public getInstrumentsForPanel_result() {
    }

    public getInstrumentsForPanel_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstrumentsForPanel_result(getInstrumentsForPanel_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getInstrumentsForPanel_result deepCopy() {
      return new getInstrumentsForPanel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getInstrumentsForPanel_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstrumentsForPanel_result)
        return this.equals((getInstrumentsForPanel_result)that);
      return false;
    }

    public boolean equals(getInstrumentsForPanel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInstrumentsForPanel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstrumentsForPanel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstrumentsForPanel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForPanel_resultStandardScheme getScheme() {
        return new getInstrumentsForPanel_resultStandardScheme();
      }
    }

    private static class getInstrumentsForPanel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInstrumentsForPanel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstrumentsForPanel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list206.size);
                  @org.apache.thrift.annotation.Nullable String _elem207;
                  for (int _i208 = 0; _i208 < _list206.size; ++_i208)
                  {
                    _elem207 = iprot.readString();
                    struct.success.add(_elem207);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstrumentsForPanel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter209 : struct.success)
            {
              oprot.writeString(_iter209);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstrumentsForPanel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInstrumentsForPanel_resultTupleScheme getScheme() {
        return new getInstrumentsForPanel_resultTupleScheme();
      }
    }

    private static class getInstrumentsForPanel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInstrumentsForPanel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForPanel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter210 : struct.success)
            {
              oprot.writeString(_iter210);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstrumentsForPanel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list211 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list211.size);
            @org.apache.thrift.annotation.Nullable String _elem212;
            for (int _i213 = 0; _i213 < _list211.size; ++_i213)
            {
              _elem212 = iprot.readString();
              struct.success.add(_elem212);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCritiqueBinaryInputArch_args implements org.apache.thrift.TBase<getCritiqueBinaryInputArch_args, getCritiqueBinaryInputArch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCritiqueBinaryInputArch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCritiqueBinaryInputArch_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputs", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCritiqueBinaryInputArch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCritiqueBinaryInputArch_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture inputs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      INPUTS((short)2, "inputs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // INPUTS
            return INPUTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUTS, new org.apache.thrift.meta_data.FieldMetaData("inputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCritiqueBinaryInputArch_args.class, metaDataMap);
    }

    public getCritiqueBinaryInputArch_args() {
    }

    public getCritiqueBinaryInputArch_args(
      String problem,
      BinaryInputArchitecture inputs)
    {
      this();
      this.problem = problem;
      this.inputs = inputs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCritiqueBinaryInputArch_args(getCritiqueBinaryInputArch_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetInputs()) {
        this.inputs = new BinaryInputArchitecture(other.inputs);
      }
    }

    public getCritiqueBinaryInputArch_args deepCopy() {
      return new getCritiqueBinaryInputArch_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.inputs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getCritiqueBinaryInputArch_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getInputs() {
      return this.inputs;
    }

    public getCritiqueBinaryInputArch_args setInputs(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture inputs) {
      this.inputs = inputs;
      return this;
    }

    public void unsetInputs() {
      this.inputs = null;
    }

    /** Returns true if field inputs is set (has been assigned a value) and false otherwise */
    public boolean isSetInputs() {
      return this.inputs != null;
    }

    public void setInputsIsSet(boolean value) {
      if (!value) {
        this.inputs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case INPUTS:
        if (value == null) {
          unsetInputs();
        } else {
          setInputs((BinaryInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case INPUTS:
        return getInputs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case INPUTS:
        return isSetInputs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCritiqueBinaryInputArch_args)
        return this.equals((getCritiqueBinaryInputArch_args)that);
      return false;
    }

    public boolean equals(getCritiqueBinaryInputArch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_inputs = true && this.isSetInputs();
      boolean that_present_inputs = true && that.isSetInputs();
      if (this_present_inputs || that_present_inputs) {
        if (!(this_present_inputs && that_present_inputs))
          return false;
        if (!this.inputs.equals(that.inputs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputs()) ? 131071 : 524287);
      if (isSetInputs())
        hashCode = hashCode * 8191 + inputs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCritiqueBinaryInputArch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputs()).compareTo(other.isSetInputs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputs, other.inputs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCritiqueBinaryInputArch_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputs:");
      if (this.inputs == null) {
        sb.append("null");
      } else {
        sb.append(this.inputs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (inputs != null) {
        inputs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCritiqueBinaryInputArch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueBinaryInputArch_argsStandardScheme getScheme() {
        return new getCritiqueBinaryInputArch_argsStandardScheme();
      }
    }

    private static class getCritiqueBinaryInputArch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCritiqueBinaryInputArch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCritiqueBinaryInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.inputs = new BinaryInputArchitecture();
                struct.inputs.read(iprot);
                struct.setInputsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCritiqueBinaryInputArch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.inputs != null) {
          oprot.writeFieldBegin(INPUTS_FIELD_DESC);
          struct.inputs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCritiqueBinaryInputArch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueBinaryInputArch_argsTupleScheme getScheme() {
        return new getCritiqueBinaryInputArch_argsTupleScheme();
      }
    }

    private static class getCritiqueBinaryInputArch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCritiqueBinaryInputArch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCritiqueBinaryInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetInputs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetInputs()) {
          struct.inputs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCritiqueBinaryInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputs = new BinaryInputArchitecture();
          struct.inputs.read(iprot);
          struct.setInputsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCritiqueBinaryInputArch_result implements org.apache.thrift.TBase<getCritiqueBinaryInputArch_result, getCritiqueBinaryInputArch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCritiqueBinaryInputArch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCritiqueBinaryInputArch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCritiqueBinaryInputArch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCritiqueBinaryInputArch_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCritiqueBinaryInputArch_result.class, metaDataMap);
    }

    public getCritiqueBinaryInputArch_result() {
    }

    public getCritiqueBinaryInputArch_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCritiqueBinaryInputArch_result(getCritiqueBinaryInputArch_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getCritiqueBinaryInputArch_result deepCopy() {
      return new getCritiqueBinaryInputArch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getCritiqueBinaryInputArch_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCritiqueBinaryInputArch_result)
        return this.equals((getCritiqueBinaryInputArch_result)that);
      return false;
    }

    public boolean equals(getCritiqueBinaryInputArch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCritiqueBinaryInputArch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCritiqueBinaryInputArch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCritiqueBinaryInputArch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueBinaryInputArch_resultStandardScheme getScheme() {
        return new getCritiqueBinaryInputArch_resultStandardScheme();
      }
    }

    private static class getCritiqueBinaryInputArch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCritiqueBinaryInputArch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCritiqueBinaryInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list214.size);
                  @org.apache.thrift.annotation.Nullable String _elem215;
                  for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                  {
                    _elem215 = iprot.readString();
                    struct.success.add(_elem215);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCritiqueBinaryInputArch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter217 : struct.success)
            {
              oprot.writeString(_iter217);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCritiqueBinaryInputArch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueBinaryInputArch_resultTupleScheme getScheme() {
        return new getCritiqueBinaryInputArch_resultTupleScheme();
      }
    }

    private static class getCritiqueBinaryInputArch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCritiqueBinaryInputArch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCritiqueBinaryInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter218 : struct.success)
            {
              oprot.writeString(_iter218);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCritiqueBinaryInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list219.size);
            @org.apache.thrift.annotation.Nullable String _elem220;
            for (int _i221 = 0; _i221 < _list219.size; ++_i221)
            {
              _elem220 = iprot.readString();
              struct.success.add(_elem220);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCritiqueDiscreteInputArch_args implements org.apache.thrift.TBase<getCritiqueDiscreteInputArch_args, getCritiqueDiscreteInputArch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCritiqueDiscreteInputArch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCritiqueDiscreteInputArch_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputs", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCritiqueDiscreteInputArch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCritiqueDiscreteInputArch_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture inputs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      INPUTS((short)2, "inputs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // INPUTS
            return INPUTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUTS, new org.apache.thrift.meta_data.FieldMetaData("inputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCritiqueDiscreteInputArch_args.class, metaDataMap);
    }

    public getCritiqueDiscreteInputArch_args() {
    }

    public getCritiqueDiscreteInputArch_args(
      String problem,
      DiscreteInputArchitecture inputs)
    {
      this();
      this.problem = problem;
      this.inputs = inputs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCritiqueDiscreteInputArch_args(getCritiqueDiscreteInputArch_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetInputs()) {
        this.inputs = new DiscreteInputArchitecture(other.inputs);
      }
    }

    public getCritiqueDiscreteInputArch_args deepCopy() {
      return new getCritiqueDiscreteInputArch_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.inputs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getCritiqueDiscreteInputArch_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DiscreteInputArchitecture getInputs() {
      return this.inputs;
    }

    public getCritiqueDiscreteInputArch_args setInputs(@org.apache.thrift.annotation.Nullable DiscreteInputArchitecture inputs) {
      this.inputs = inputs;
      return this;
    }

    public void unsetInputs() {
      this.inputs = null;
    }

    /** Returns true if field inputs is set (has been assigned a value) and false otherwise */
    public boolean isSetInputs() {
      return this.inputs != null;
    }

    public void setInputsIsSet(boolean value) {
      if (!value) {
        this.inputs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case INPUTS:
        if (value == null) {
          unsetInputs();
        } else {
          setInputs((DiscreteInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case INPUTS:
        return getInputs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case INPUTS:
        return isSetInputs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCritiqueDiscreteInputArch_args)
        return this.equals((getCritiqueDiscreteInputArch_args)that);
      return false;
    }

    public boolean equals(getCritiqueDiscreteInputArch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_inputs = true && this.isSetInputs();
      boolean that_present_inputs = true && that.isSetInputs();
      if (this_present_inputs || that_present_inputs) {
        if (!(this_present_inputs && that_present_inputs))
          return false;
        if (!this.inputs.equals(that.inputs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputs()) ? 131071 : 524287);
      if (isSetInputs())
        hashCode = hashCode * 8191 + inputs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCritiqueDiscreteInputArch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInputs()).compareTo(other.isSetInputs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputs, other.inputs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCritiqueDiscreteInputArch_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputs:");
      if (this.inputs == null) {
        sb.append("null");
      } else {
        sb.append(this.inputs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (inputs != null) {
        inputs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCritiqueDiscreteInputArch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueDiscreteInputArch_argsStandardScheme getScheme() {
        return new getCritiqueDiscreteInputArch_argsStandardScheme();
      }
    }

    private static class getCritiqueDiscreteInputArch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCritiqueDiscreteInputArch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCritiqueDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.inputs = new DiscreteInputArchitecture();
                struct.inputs.read(iprot);
                struct.setInputsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCritiqueDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.inputs != null) {
          oprot.writeFieldBegin(INPUTS_FIELD_DESC);
          struct.inputs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCritiqueDiscreteInputArch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueDiscreteInputArch_argsTupleScheme getScheme() {
        return new getCritiqueDiscreteInputArch_argsTupleScheme();
      }
    }

    private static class getCritiqueDiscreteInputArch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCritiqueDiscreteInputArch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCritiqueDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetInputs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetInputs()) {
          struct.inputs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCritiqueDiscreteInputArch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputs = new DiscreteInputArchitecture();
          struct.inputs.read(iprot);
          struct.setInputsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCritiqueDiscreteInputArch_result implements org.apache.thrift.TBase<getCritiqueDiscreteInputArch_result, getCritiqueDiscreteInputArch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCritiqueDiscreteInputArch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCritiqueDiscreteInputArch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCritiqueDiscreteInputArch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCritiqueDiscreteInputArch_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCritiqueDiscreteInputArch_result.class, metaDataMap);
    }

    public getCritiqueDiscreteInputArch_result() {
    }

    public getCritiqueDiscreteInputArch_result(
      java.util.List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCritiqueDiscreteInputArch_result(getCritiqueDiscreteInputArch_result other) {
      if (other.isSetSuccess()) {
        java.util.List<String> __this__success = new java.util.ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getCritiqueDiscreteInputArch_result deepCopy() {
      return new getCritiqueDiscreteInputArch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<String> getSuccess() {
      return this.success;
    }

    public getCritiqueDiscreteInputArch_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCritiqueDiscreteInputArch_result)
        return this.equals((getCritiqueDiscreteInputArch_result)that);
      return false;
    }

    public boolean equals(getCritiqueDiscreteInputArch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCritiqueDiscreteInputArch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCritiqueDiscreteInputArch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCritiqueDiscreteInputArch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueDiscreteInputArch_resultStandardScheme getScheme() {
        return new getCritiqueDiscreteInputArch_resultStandardScheme();
      }
    }

    private static class getCritiqueDiscreteInputArch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCritiqueDiscreteInputArch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCritiqueDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<String>(_list222.size);
                  @org.apache.thrift.annotation.Nullable String _elem223;
                  for (int _i224 = 0; _i224 < _list222.size; ++_i224)
                  {
                    _elem223 = iprot.readString();
                    struct.success.add(_elem223);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCritiqueDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter225 : struct.success)
            {
              oprot.writeString(_iter225);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCritiqueDiscreteInputArch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCritiqueDiscreteInputArch_resultTupleScheme getScheme() {
        return new getCritiqueDiscreteInputArch_resultTupleScheme();
      }
    }

    private static class getCritiqueDiscreteInputArch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCritiqueDiscreteInputArch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCritiqueDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter226 : struct.success)
            {
              oprot.writeString(_iter226);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCritiqueDiscreteInputArch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<String>(_list227.size);
            @org.apache.thrift.annotation.Nullable String _elem228;
            for (int _i229 = 0; _i229 < _list227.size; ++_i229)
            {
              _elem228 = iprot.readString();
              struct.success.add(_elem228);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchitectureScoreExplanation_args implements org.apache.thrift.TBase<getArchitectureScoreExplanation_args, getArchitectureScoreExplanation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArchitectureScoreExplanation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchitectureScoreExplanation_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchitectureScoreExplanation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchitectureScoreExplanation_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchitectureScoreExplanation_args.class, metaDataMap);
    }

    public getArchitectureScoreExplanation_args() {
    }

    public getArchitectureScoreExplanation_args(
      String problem,
      BinaryInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchitectureScoreExplanation_args(getArchitectureScoreExplanation_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
    }

    public getArchitectureScoreExplanation_args deepCopy() {
      return new getArchitectureScoreExplanation_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getArchitectureScoreExplanation_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public getArchitectureScoreExplanation_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchitectureScoreExplanation_args)
        return this.equals((getArchitectureScoreExplanation_args)that);
      return false;
    }

    public boolean equals(getArchitectureScoreExplanation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchitectureScoreExplanation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchitectureScoreExplanation_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchitectureScoreExplanation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchitectureScoreExplanation_argsStandardScheme getScheme() {
        return new getArchitectureScoreExplanation_argsStandardScheme();
      }
    }

    private static class getArchitectureScoreExplanation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchitectureScoreExplanation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchitectureScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchitectureScoreExplanation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchitectureScoreExplanation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchitectureScoreExplanation_argsTupleScheme getScheme() {
        return new getArchitectureScoreExplanation_argsTupleScheme();
      }
    }

    private static class getArchitectureScoreExplanation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchitectureScoreExplanation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchitectureScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchitectureScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchitectureScoreExplanation_result implements org.apache.thrift.TBase<getArchitectureScoreExplanation_result, getArchitectureScoreExplanation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArchitectureScoreExplanation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchitectureScoreExplanation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchitectureScoreExplanation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchitectureScoreExplanation_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ObjectiveSatisfaction> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectiveSatisfaction.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchitectureScoreExplanation_result.class, metaDataMap);
    }

    public getArchitectureScoreExplanation_result() {
    }

    public getArchitectureScoreExplanation_result(
      java.util.List<ObjectiveSatisfaction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchitectureScoreExplanation_result(getArchitectureScoreExplanation_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ObjectiveSatisfaction> __this__success = new java.util.ArrayList<ObjectiveSatisfaction>(other.success.size());
        for (ObjectiveSatisfaction other_element : other.success) {
          __this__success.add(new ObjectiveSatisfaction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArchitectureScoreExplanation_result deepCopy() {
      return new getArchitectureScoreExplanation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ObjectiveSatisfaction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ObjectiveSatisfaction elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ObjectiveSatisfaction>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ObjectiveSatisfaction> getSuccess() {
      return this.success;
    }

    public getArchitectureScoreExplanation_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ObjectiveSatisfaction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ObjectiveSatisfaction>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchitectureScoreExplanation_result)
        return this.equals((getArchitectureScoreExplanation_result)that);
      return false;
    }

    public boolean equals(getArchitectureScoreExplanation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchitectureScoreExplanation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchitectureScoreExplanation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchitectureScoreExplanation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchitectureScoreExplanation_resultStandardScheme getScheme() {
        return new getArchitectureScoreExplanation_resultStandardScheme();
      }
    }

    private static class getArchitectureScoreExplanation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchitectureScoreExplanation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchitectureScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ObjectiveSatisfaction>(_list230.size);
                  @org.apache.thrift.annotation.Nullable ObjectiveSatisfaction _elem231;
                  for (int _i232 = 0; _i232 < _list230.size; ++_i232)
                  {
                    _elem231 = new ObjectiveSatisfaction();
                    _elem231.read(iprot);
                    struct.success.add(_elem231);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchitectureScoreExplanation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ObjectiveSatisfaction _iter233 : struct.success)
            {
              _iter233.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchitectureScoreExplanation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchitectureScoreExplanation_resultTupleScheme getScheme() {
        return new getArchitectureScoreExplanation_resultTupleScheme();
      }
    }

    private static class getArchitectureScoreExplanation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchitectureScoreExplanation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchitectureScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ObjectiveSatisfaction _iter234 : struct.success)
            {
              _iter234.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchitectureScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list235 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<ObjectiveSatisfaction>(_list235.size);
            @org.apache.thrift.annotation.Nullable ObjectiveSatisfaction _elem236;
            for (int _i237 = 0; _i237 < _list235.size; ++_i237)
            {
              _elem236 = new ObjectiveSatisfaction();
              _elem236.read(iprot);
              struct.success.add(_elem236);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPanelScoreExplanation_args implements org.apache.thrift.TBase<getPanelScoreExplanation_args, getPanelScoreExplanation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPanelScoreExplanation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPanelScoreExplanation_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PANEL_FIELD_DESC = new org.apache.thrift.protocol.TField("panel", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPanelScoreExplanation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPanelScoreExplanation_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required
    public @org.apache.thrift.annotation.Nullable String panel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch"),
      PANEL((short)3, "panel");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          case 3: // PANEL
            return PANEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      tmpMap.put(_Fields.PANEL, new org.apache.thrift.meta_data.FieldMetaData("panel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPanelScoreExplanation_args.class, metaDataMap);
    }

    public getPanelScoreExplanation_args() {
    }

    public getPanelScoreExplanation_args(
      String problem,
      BinaryInputArchitecture arch,
      String panel)
    {
      this();
      this.problem = problem;
      this.arch = arch;
      this.panel = panel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPanelScoreExplanation_args(getPanelScoreExplanation_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
      if (other.isSetPanel()) {
        this.panel = other.panel;
      }
    }

    public getPanelScoreExplanation_args deepCopy() {
      return new getPanelScoreExplanation_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
      this.panel = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getPanelScoreExplanation_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public getPanelScoreExplanation_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getPanel() {
      return this.panel;
    }

    public getPanelScoreExplanation_args setPanel(@org.apache.thrift.annotation.Nullable String panel) {
      this.panel = panel;
      return this;
    }

    public void unsetPanel() {
      this.panel = null;
    }

    /** Returns true if field panel is set (has been assigned a value) and false otherwise */
    public boolean isSetPanel() {
      return this.panel != null;
    }

    public void setPanelIsSet(boolean value) {
      if (!value) {
        this.panel = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      case PANEL:
        if (value == null) {
          unsetPanel();
        } else {
          setPanel((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      case PANEL:
        return getPanel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      case PANEL:
        return isSetPanel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPanelScoreExplanation_args)
        return this.equals((getPanelScoreExplanation_args)that);
      return false;
    }

    public boolean equals(getPanelScoreExplanation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      boolean this_present_panel = true && this.isSetPanel();
      boolean that_present_panel = true && that.isSetPanel();
      if (this_present_panel || that_present_panel) {
        if (!(this_present_panel && that_present_panel))
          return false;
        if (!this.panel.equals(that.panel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      hashCode = hashCode * 8191 + ((isSetPanel()) ? 131071 : 524287);
      if (isSetPanel())
        hashCode = hashCode * 8191 + panel.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPanelScoreExplanation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPanel()).compareTo(other.isSetPanel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.panel, other.panel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPanelScoreExplanation_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("panel:");
      if (this.panel == null) {
        sb.append("null");
      } else {
        sb.append(this.panel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPanelScoreExplanation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPanelScoreExplanation_argsStandardScheme getScheme() {
        return new getPanelScoreExplanation_argsStandardScheme();
      }
    }

    private static class getPanelScoreExplanation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPanelScoreExplanation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPanelScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PANEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.panel = iprot.readString();
                struct.setPanelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPanelScoreExplanation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.panel != null) {
          oprot.writeFieldBegin(PANEL_FIELD_DESC);
          oprot.writeString(struct.panel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPanelScoreExplanation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPanelScoreExplanation_argsTupleScheme getScheme() {
        return new getPanelScoreExplanation_argsTupleScheme();
      }
    }

    private static class getPanelScoreExplanation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPanelScoreExplanation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPanelScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        if (struct.isSetPanel()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
        if (struct.isSetPanel()) {
          oprot.writeString(struct.panel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPanelScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
        if (incoming.get(2)) {
          struct.panel = iprot.readString();
          struct.setPanelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPanelScoreExplanation_result implements org.apache.thrift.TBase<getPanelScoreExplanation_result, getPanelScoreExplanation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPanelScoreExplanation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPanelScoreExplanation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPanelScoreExplanation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPanelScoreExplanation_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ObjectiveSatisfaction> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectiveSatisfaction.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPanelScoreExplanation_result.class, metaDataMap);
    }

    public getPanelScoreExplanation_result() {
    }

    public getPanelScoreExplanation_result(
      java.util.List<ObjectiveSatisfaction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPanelScoreExplanation_result(getPanelScoreExplanation_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ObjectiveSatisfaction> __this__success = new java.util.ArrayList<ObjectiveSatisfaction>(other.success.size());
        for (ObjectiveSatisfaction other_element : other.success) {
          __this__success.add(new ObjectiveSatisfaction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPanelScoreExplanation_result deepCopy() {
      return new getPanelScoreExplanation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ObjectiveSatisfaction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ObjectiveSatisfaction elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ObjectiveSatisfaction>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ObjectiveSatisfaction> getSuccess() {
      return this.success;
    }

    public getPanelScoreExplanation_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ObjectiveSatisfaction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ObjectiveSatisfaction>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPanelScoreExplanation_result)
        return this.equals((getPanelScoreExplanation_result)that);
      return false;
    }

    public boolean equals(getPanelScoreExplanation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPanelScoreExplanation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPanelScoreExplanation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPanelScoreExplanation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPanelScoreExplanation_resultStandardScheme getScheme() {
        return new getPanelScoreExplanation_resultStandardScheme();
      }
    }

    private static class getPanelScoreExplanation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPanelScoreExplanation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPanelScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ObjectiveSatisfaction>(_list238.size);
                  @org.apache.thrift.annotation.Nullable ObjectiveSatisfaction _elem239;
                  for (int _i240 = 0; _i240 < _list238.size; ++_i240)
                  {
                    _elem239 = new ObjectiveSatisfaction();
                    _elem239.read(iprot);
                    struct.success.add(_elem239);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPanelScoreExplanation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ObjectiveSatisfaction _iter241 : struct.success)
            {
              _iter241.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPanelScoreExplanation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPanelScoreExplanation_resultTupleScheme getScheme() {
        return new getPanelScoreExplanation_resultTupleScheme();
      }
    }

    private static class getPanelScoreExplanation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPanelScoreExplanation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPanelScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ObjectiveSatisfaction _iter242 : struct.success)
            {
              _iter242.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPanelScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<ObjectiveSatisfaction>(_list243.size);
            @org.apache.thrift.annotation.Nullable ObjectiveSatisfaction _elem244;
            for (int _i245 = 0; _i245 < _list243.size; ++_i245)
            {
              _elem244 = new ObjectiveSatisfaction();
              _elem244.read(iprot);
              struct.success.add(_elem244);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getObjectiveScoreExplanation_args implements org.apache.thrift.TBase<getObjectiveScoreExplanation_args, getObjectiveScoreExplanation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectiveScoreExplanation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectiveScoreExplanation_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OBJECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("objective", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getObjectiveScoreExplanation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getObjectiveScoreExplanation_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required
    public @org.apache.thrift.annotation.Nullable String objective; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch"),
      OBJECTIVE((short)3, "objective");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          case 3: // OBJECTIVE
            return OBJECTIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      tmpMap.put(_Fields.OBJECTIVE, new org.apache.thrift.meta_data.FieldMetaData("objective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectiveScoreExplanation_args.class, metaDataMap);
    }

    public getObjectiveScoreExplanation_args() {
    }

    public getObjectiveScoreExplanation_args(
      String problem,
      BinaryInputArchitecture arch,
      String objective)
    {
      this();
      this.problem = problem;
      this.arch = arch;
      this.objective = objective;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectiveScoreExplanation_args(getObjectiveScoreExplanation_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
      if (other.isSetObjective()) {
        this.objective = other.objective;
      }
    }

    public getObjectiveScoreExplanation_args deepCopy() {
      return new getObjectiveScoreExplanation_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
      this.objective = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getObjectiveScoreExplanation_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public getObjectiveScoreExplanation_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getObjective() {
      return this.objective;
    }

    public getObjectiveScoreExplanation_args setObjective(@org.apache.thrift.annotation.Nullable String objective) {
      this.objective = objective;
      return this;
    }

    public void unsetObjective() {
      this.objective = null;
    }

    /** Returns true if field objective is set (has been assigned a value) and false otherwise */
    public boolean isSetObjective() {
      return this.objective != null;
    }

    public void setObjectiveIsSet(boolean value) {
      if (!value) {
        this.objective = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      case OBJECTIVE:
        if (value == null) {
          unsetObjective();
        } else {
          setObjective((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      case OBJECTIVE:
        return getObjective();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      case OBJECTIVE:
        return isSetObjective();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectiveScoreExplanation_args)
        return this.equals((getObjectiveScoreExplanation_args)that);
      return false;
    }

    public boolean equals(getObjectiveScoreExplanation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      boolean this_present_objective = true && this.isSetObjective();
      boolean that_present_objective = true && that.isSetObjective();
      if (this_present_objective || that_present_objective) {
        if (!(this_present_objective && that_present_objective))
          return false;
        if (!this.objective.equals(that.objective))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      hashCode = hashCode * 8191 + ((isSetObjective()) ? 131071 : 524287);
      if (isSetObjective())
        hashCode = hashCode * 8191 + objective.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getObjectiveScoreExplanation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObjective()).compareTo(other.isSetObjective());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjective()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objective, other.objective);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectiveScoreExplanation_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("objective:");
      if (this.objective == null) {
        sb.append("null");
      } else {
        sb.append(this.objective);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectiveScoreExplanation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveScoreExplanation_argsStandardScheme getScheme() {
        return new getObjectiveScoreExplanation_argsStandardScheme();
      }
    }

    private static class getObjectiveScoreExplanation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getObjectiveScoreExplanation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectiveScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OBJECTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.objective = iprot.readString();
                struct.setObjectiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectiveScoreExplanation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.objective != null) {
          oprot.writeFieldBegin(OBJECTIVE_FIELD_DESC);
          oprot.writeString(struct.objective);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectiveScoreExplanation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveScoreExplanation_argsTupleScheme getScheme() {
        return new getObjectiveScoreExplanation_argsTupleScheme();
      }
    }

    private static class getObjectiveScoreExplanation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getObjectiveScoreExplanation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectiveScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        if (struct.isSetObjective()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
        if (struct.isSetObjective()) {
          oprot.writeString(struct.objective);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectiveScoreExplanation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
        if (incoming.get(2)) {
          struct.objective = iprot.readString();
          struct.setObjectiveIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getObjectiveScoreExplanation_result implements org.apache.thrift.TBase<getObjectiveScoreExplanation_result, getObjectiveScoreExplanation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectiveScoreExplanation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectiveScoreExplanation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getObjectiveScoreExplanation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getObjectiveScoreExplanation_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ObjectiveSatisfaction> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectiveSatisfaction.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectiveScoreExplanation_result.class, metaDataMap);
    }

    public getObjectiveScoreExplanation_result() {
    }

    public getObjectiveScoreExplanation_result(
      java.util.List<ObjectiveSatisfaction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectiveScoreExplanation_result(getObjectiveScoreExplanation_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ObjectiveSatisfaction> __this__success = new java.util.ArrayList<ObjectiveSatisfaction>(other.success.size());
        for (ObjectiveSatisfaction other_element : other.success) {
          __this__success.add(new ObjectiveSatisfaction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getObjectiveScoreExplanation_result deepCopy() {
      return new getObjectiveScoreExplanation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ObjectiveSatisfaction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ObjectiveSatisfaction elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ObjectiveSatisfaction>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ObjectiveSatisfaction> getSuccess() {
      return this.success;
    }

    public getObjectiveScoreExplanation_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ObjectiveSatisfaction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ObjectiveSatisfaction>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectiveScoreExplanation_result)
        return this.equals((getObjectiveScoreExplanation_result)that);
      return false;
    }

    public boolean equals(getObjectiveScoreExplanation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getObjectiveScoreExplanation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectiveScoreExplanation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectiveScoreExplanation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveScoreExplanation_resultStandardScheme getScheme() {
        return new getObjectiveScoreExplanation_resultStandardScheme();
      }
    }

    private static class getObjectiveScoreExplanation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getObjectiveScoreExplanation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectiveScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list246 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ObjectiveSatisfaction>(_list246.size);
                  @org.apache.thrift.annotation.Nullable ObjectiveSatisfaction _elem247;
                  for (int _i248 = 0; _i248 < _list246.size; ++_i248)
                  {
                    _elem247 = new ObjectiveSatisfaction();
                    _elem247.read(iprot);
                    struct.success.add(_elem247);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectiveScoreExplanation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ObjectiveSatisfaction _iter249 : struct.success)
            {
              _iter249.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectiveScoreExplanation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getObjectiveScoreExplanation_resultTupleScheme getScheme() {
        return new getObjectiveScoreExplanation_resultTupleScheme();
      }
    }

    private static class getObjectiveScoreExplanation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getObjectiveScoreExplanation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectiveScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ObjectiveSatisfaction _iter250 : struct.success)
            {
              _iter250.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectiveScoreExplanation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list251 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<ObjectiveSatisfaction>(_list251.size);
            @org.apache.thrift.annotation.Nullable ObjectiveSatisfaction _elem252;
            for (int _i253 = 0; _i253 < _list251.size; ++_i253)
            {
              _elem252 = new ObjectiveSatisfaction();
              _elem252.read(iprot);
              struct.success.add(_elem252);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isGARunning_args implements org.apache.thrift.TBase<isGARunning_args, isGARunning_args._Fields>, java.io.Serializable, Cloneable, Comparable<isGARunning_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isGARunning_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isGARunning_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isGARunning_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isGARunning_args.class, metaDataMap);
    }

    public isGARunning_args() {
    }

    public isGARunning_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGARunning_args(isGARunning_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public isGARunning_args deepCopy() {
      return new isGARunning_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getId() {
      return this.id;
    }

    public isGARunning_args setId(@org.apache.thrift.annotation.Nullable String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGARunning_args)
        return this.equals((isGARunning_args)that);
      return false;
    }

    public boolean equals(isGARunning_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isGARunning_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isGARunning_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isGARunning_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isGARunning_argsStandardScheme getScheme() {
        return new isGARunning_argsStandardScheme();
      }
    }

    private static class isGARunning_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isGARunning_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isGARunning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isGARunning_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isGARunning_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isGARunning_argsTupleScheme getScheme() {
        return new isGARunning_argsTupleScheme();
      }
    }

    private static class isGARunning_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isGARunning_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isGARunning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isGARunning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isGARunning_result implements org.apache.thrift.TBase<isGARunning_result, isGARunning_result._Fields>, java.io.Serializable, Cloneable, Comparable<isGARunning_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isGARunning_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isGARunning_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isGARunning_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isGARunning_result.class, metaDataMap);
    }

    public isGARunning_result() {
    }

    public isGARunning_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGARunning_result(isGARunning_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isGARunning_result deepCopy() {
      return new isGARunning_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isGARunning_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGARunning_result)
        return this.equals((isGARunning_result)that);
      return false;
    }

    public boolean equals(isGARunning_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(isGARunning_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isGARunning_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isGARunning_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isGARunning_resultStandardScheme getScheme() {
        return new isGARunning_resultStandardScheme();
      }
    }

    private static class isGARunning_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isGARunning_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isGARunning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isGARunning_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isGARunning_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isGARunning_resultTupleScheme getScheme() {
        return new isGARunning_resultTupleScheme();
      }
    }

    private static class isGARunning_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isGARunning_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isGARunning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isGARunning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stopGA_args implements org.apache.thrift.TBase<stopGA_args, stopGA_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopGA_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopGA_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stopGA_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stopGA_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopGA_args.class, metaDataMap);
    }

    public stopGA_args() {
    }

    public stopGA_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopGA_args(stopGA_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public stopGA_args deepCopy() {
      return new stopGA_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getId() {
      return this.id;
    }

    public stopGA_args setId(@org.apache.thrift.annotation.Nullable String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopGA_args)
        return this.equals((stopGA_args)that);
      return false;
    }

    public boolean equals(stopGA_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(stopGA_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopGA_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopGA_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopGA_argsStandardScheme getScheme() {
        return new stopGA_argsStandardScheme();
      }
    }

    private static class stopGA_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<stopGA_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopGA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopGA_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopGA_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopGA_argsTupleScheme getScheme() {
        return new stopGA_argsTupleScheme();
      }
    }

    private static class stopGA_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<stopGA_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopGA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopGA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stopGA_result implements org.apache.thrift.TBase<stopGA_result, stopGA_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopGA_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopGA_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stopGA_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stopGA_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopGA_result.class, metaDataMap);
    }

    public stopGA_result() {
    }

    public stopGA_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopGA_result(stopGA_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public stopGA_result deepCopy() {
      return new stopGA_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public stopGA_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopGA_result)
        return this.equals((stopGA_result)that);
      return false;
    }

    public boolean equals(stopGA_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(stopGA_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopGA_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopGA_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopGA_resultStandardScheme getScheme() {
        return new stopGA_resultStandardScheme();
      }
    }

    private static class stopGA_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<stopGA_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopGA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopGA_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopGA_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopGA_resultTupleScheme getScheme() {
        return new stopGA_resultTupleScheme();
      }
    }

    private static class stopGA_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<stopGA_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopGA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopGA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startGABinaryInput_args implements org.apache.thrift.TBase<startGABinaryInput_args, startGABinaryInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<startGABinaryInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startGABinaryInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataset", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startGABinaryInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startGABinaryInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<BinaryInputArchitecture> dataset; // required
    public @org.apache.thrift.annotation.Nullable String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      DATASET((short)2, "dataset"),
      USERNAME((short)3, "username");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // DATASET
            return DATASET;
          case 3: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATASET, new org.apache.thrift.meta_data.FieldMetaData("dataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startGABinaryInput_args.class, metaDataMap);
    }

    public startGABinaryInput_args() {
    }

    public startGABinaryInput_args(
      String problem,
      java.util.List<BinaryInputArchitecture> dataset,
      String username)
    {
      this();
      this.problem = problem;
      this.dataset = dataset;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startGABinaryInput_args(startGABinaryInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetDataset()) {
        java.util.List<BinaryInputArchitecture> __this__dataset = new java.util.ArrayList<BinaryInputArchitecture>(other.dataset.size());
        for (BinaryInputArchitecture other_element : other.dataset) {
          __this__dataset.add(new BinaryInputArchitecture(other_element));
        }
        this.dataset = __this__dataset;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public startGABinaryInput_args deepCopy() {
      return new startGABinaryInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.dataset = null;
      this.username = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public startGABinaryInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getDatasetSize() {
      return (this.dataset == null) ? 0 : this.dataset.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<BinaryInputArchitecture> getDatasetIterator() {
      return (this.dataset == null) ? null : this.dataset.iterator();
    }

    public void addToDataset(BinaryInputArchitecture elem) {
      if (this.dataset == null) {
        this.dataset = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.dataset.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<BinaryInputArchitecture> getDataset() {
      return this.dataset;
    }

    public startGABinaryInput_args setDataset(@org.apache.thrift.annotation.Nullable java.util.List<BinaryInputArchitecture> dataset) {
      this.dataset = dataset;
      return this;
    }

    public void unsetDataset() {
      this.dataset = null;
    }

    /** Returns true if field dataset is set (has been assigned a value) and false otherwise */
    public boolean isSetDataset() {
      return this.dataset != null;
    }

    public void setDatasetIsSet(boolean value) {
      if (!value) {
        this.dataset = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUsername() {
      return this.username;
    }

    public startGABinaryInput_args setUsername(@org.apache.thrift.annotation.Nullable String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case DATASET:
        if (value == null) {
          unsetDataset();
        } else {
          setDataset((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case DATASET:
        return getDataset();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case DATASET:
        return isSetDataset();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startGABinaryInput_args)
        return this.equals((startGABinaryInput_args)that);
      return false;
    }

    public boolean equals(startGABinaryInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_dataset = true && this.isSetDataset();
      boolean that_present_dataset = true && that.isSetDataset();
      if (this_present_dataset || that_present_dataset) {
        if (!(this_present_dataset && that_present_dataset))
          return false;
        if (!this.dataset.equals(that.dataset))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataset()) ? 131071 : 524287);
      if (isSetDataset())
        hashCode = hashCode * 8191 + dataset.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startGABinaryInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataset()).compareTo(other.isSetDataset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataset, other.dataset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startGABinaryInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataset:");
      if (this.dataset == null) {
        sb.append("null");
      } else {
        sb.append(this.dataset);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startGABinaryInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGABinaryInput_argsStandardScheme getScheme() {
        return new startGABinaryInput_argsStandardScheme();
      }
    }

    private static class startGABinaryInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<startGABinaryInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startGABinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATASET
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list254 = iprot.readListBegin();
                  struct.dataset = new java.util.ArrayList<BinaryInputArchitecture>(_list254.size);
                  @org.apache.thrift.annotation.Nullable BinaryInputArchitecture _elem255;
                  for (int _i256 = 0; _i256 < _list254.size; ++_i256)
                  {
                    _elem255 = new BinaryInputArchitecture();
                    _elem255.read(iprot);
                    struct.dataset.add(_elem255);
                  }
                  iprot.readListEnd();
                }
                struct.setDatasetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startGABinaryInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.dataset != null) {
          oprot.writeFieldBegin(DATASET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataset.size()));
            for (BinaryInputArchitecture _iter257 : struct.dataset)
            {
              _iter257.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startGABinaryInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGABinaryInput_argsTupleScheme getScheme() {
        return new startGABinaryInput_argsTupleScheme();
      }
    }

    private static class startGABinaryInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<startGABinaryInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startGABinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetDataset()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetDataset()) {
          {
            oprot.writeI32(struct.dataset.size());
            for (BinaryInputArchitecture _iter258 : struct.dataset)
            {
              _iter258.write(oprot);
            }
          }
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startGABinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list259 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.dataset = new java.util.ArrayList<BinaryInputArchitecture>(_list259.size);
            @org.apache.thrift.annotation.Nullable BinaryInputArchitecture _elem260;
            for (int _i261 = 0; _i261 < _list259.size; ++_i261)
            {
              _elem260 = new BinaryInputArchitecture();
              _elem260.read(iprot);
              struct.dataset.add(_elem260);
            }
          }
          struct.setDatasetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startGABinaryInput_result implements org.apache.thrift.TBase<startGABinaryInput_result, startGABinaryInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<startGABinaryInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startGABinaryInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startGABinaryInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startGABinaryInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startGABinaryInput_result.class, metaDataMap);
    }

    public startGABinaryInput_result() {
    }

    public startGABinaryInput_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startGABinaryInput_result(startGABinaryInput_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public startGABinaryInput_result deepCopy() {
      return new startGABinaryInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSuccess() {
      return this.success;
    }

    public startGABinaryInput_result setSuccess(@org.apache.thrift.annotation.Nullable String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startGABinaryInput_result)
        return this.equals((startGABinaryInput_result)that);
      return false;
    }

    public boolean equals(startGABinaryInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startGABinaryInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startGABinaryInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startGABinaryInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGABinaryInput_resultStandardScheme getScheme() {
        return new startGABinaryInput_resultStandardScheme();
      }
    }

    private static class startGABinaryInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<startGABinaryInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startGABinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startGABinaryInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startGABinaryInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGABinaryInput_resultTupleScheme getScheme() {
        return new startGABinaryInput_resultTupleScheme();
      }
    }

    private static class startGABinaryInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<startGABinaryInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startGABinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startGABinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startGADiscreteInput_args implements org.apache.thrift.TBase<startGADiscreteInput_args, startGADiscreteInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<startGADiscreteInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startGADiscreteInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataset", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startGADiscreteInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startGADiscreteInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<DiscreteInputArchitecture> dataset; // required
    public @org.apache.thrift.annotation.Nullable String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      DATASET((short)2, "dataset"),
      USERNAME((short)3, "username");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // DATASET
            return DATASET;
          case 3: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATASET, new org.apache.thrift.meta_data.FieldMetaData("dataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startGADiscreteInput_args.class, metaDataMap);
    }

    public startGADiscreteInput_args() {
    }

    public startGADiscreteInput_args(
      String problem,
      java.util.List<DiscreteInputArchitecture> dataset,
      String username)
    {
      this();
      this.problem = problem;
      this.dataset = dataset;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startGADiscreteInput_args(startGADiscreteInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetDataset()) {
        java.util.List<DiscreteInputArchitecture> __this__dataset = new java.util.ArrayList<DiscreteInputArchitecture>(other.dataset.size());
        for (DiscreteInputArchitecture other_element : other.dataset) {
          __this__dataset.add(new DiscreteInputArchitecture(other_element));
        }
        this.dataset = __this__dataset;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public startGADiscreteInput_args deepCopy() {
      return new startGADiscreteInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.dataset = null;
      this.username = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public startGADiscreteInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getDatasetSize() {
      return (this.dataset == null) ? 0 : this.dataset.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<DiscreteInputArchitecture> getDatasetIterator() {
      return (this.dataset == null) ? null : this.dataset.iterator();
    }

    public void addToDataset(DiscreteInputArchitecture elem) {
      if (this.dataset == null) {
        this.dataset = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.dataset.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<DiscreteInputArchitecture> getDataset() {
      return this.dataset;
    }

    public startGADiscreteInput_args setDataset(@org.apache.thrift.annotation.Nullable java.util.List<DiscreteInputArchitecture> dataset) {
      this.dataset = dataset;
      return this;
    }

    public void unsetDataset() {
      this.dataset = null;
    }

    /** Returns true if field dataset is set (has been assigned a value) and false otherwise */
    public boolean isSetDataset() {
      return this.dataset != null;
    }

    public void setDatasetIsSet(boolean value) {
      if (!value) {
        this.dataset = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUsername() {
      return this.username;
    }

    public startGADiscreteInput_args setUsername(@org.apache.thrift.annotation.Nullable String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case DATASET:
        if (value == null) {
          unsetDataset();
        } else {
          setDataset((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case DATASET:
        return getDataset();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case DATASET:
        return isSetDataset();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startGADiscreteInput_args)
        return this.equals((startGADiscreteInput_args)that);
      return false;
    }

    public boolean equals(startGADiscreteInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_dataset = true && this.isSetDataset();
      boolean that_present_dataset = true && that.isSetDataset();
      if (this_present_dataset || that_present_dataset) {
        if (!(this_present_dataset && that_present_dataset))
          return false;
        if (!this.dataset.equals(that.dataset))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataset()) ? 131071 : 524287);
      if (isSetDataset())
        hashCode = hashCode * 8191 + dataset.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startGADiscreteInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataset()).compareTo(other.isSetDataset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataset, other.dataset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startGADiscreteInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataset:");
      if (this.dataset == null) {
        sb.append("null");
      } else {
        sb.append(this.dataset);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startGADiscreteInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGADiscreteInput_argsStandardScheme getScheme() {
        return new startGADiscreteInput_argsStandardScheme();
      }
    }

    private static class startGADiscreteInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<startGADiscreteInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startGADiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATASET
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                  struct.dataset = new java.util.ArrayList<DiscreteInputArchitecture>(_list262.size);
                  @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture _elem263;
                  for (int _i264 = 0; _i264 < _list262.size; ++_i264)
                  {
                    _elem263 = new DiscreteInputArchitecture();
                    _elem263.read(iprot);
                    struct.dataset.add(_elem263);
                  }
                  iprot.readListEnd();
                }
                struct.setDatasetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startGADiscreteInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.dataset != null) {
          oprot.writeFieldBegin(DATASET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataset.size()));
            for (DiscreteInputArchitecture _iter265 : struct.dataset)
            {
              _iter265.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startGADiscreteInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGADiscreteInput_argsTupleScheme getScheme() {
        return new startGADiscreteInput_argsTupleScheme();
      }
    }

    private static class startGADiscreteInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<startGADiscreteInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startGADiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetDataset()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetDataset()) {
          {
            oprot.writeI32(struct.dataset.size());
            for (DiscreteInputArchitecture _iter266 : struct.dataset)
            {
              _iter266.write(oprot);
            }
          }
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startGADiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list267 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.dataset = new java.util.ArrayList<DiscreteInputArchitecture>(_list267.size);
            @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture _elem268;
            for (int _i269 = 0; _i269 < _list267.size; ++_i269)
            {
              _elem268 = new DiscreteInputArchitecture();
              _elem268.read(iprot);
              struct.dataset.add(_elem268);
            }
          }
          struct.setDatasetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startGADiscreteInput_result implements org.apache.thrift.TBase<startGADiscreteInput_result, startGADiscreteInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<startGADiscreteInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startGADiscreteInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startGADiscreteInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startGADiscreteInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startGADiscreteInput_result.class, metaDataMap);
    }

    public startGADiscreteInput_result() {
    }

    public startGADiscreteInput_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startGADiscreteInput_result(startGADiscreteInput_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public startGADiscreteInput_result deepCopy() {
      return new startGADiscreteInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSuccess() {
      return this.success;
    }

    public startGADiscreteInput_result setSuccess(@org.apache.thrift.annotation.Nullable String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startGADiscreteInput_result)
        return this.equals((startGADiscreteInput_result)that);
      return false;
    }

    public boolean equals(startGADiscreteInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startGADiscreteInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startGADiscreteInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startGADiscreteInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGADiscreteInput_resultStandardScheme getScheme() {
        return new startGADiscreteInput_resultStandardScheme();
      }
    }

    private static class startGADiscreteInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<startGADiscreteInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startGADiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startGADiscreteInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startGADiscreteInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startGADiscreteInput_resultTupleScheme getScheme() {
        return new startGADiscreteInput_resultTupleScheme();
      }
    }

    private static class startGADiscreteInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<startGADiscreteInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startGADiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startGADiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchScienceInformationBinaryInput_args implements org.apache.thrift.TBase<getArchScienceInformationBinaryInput_args, getArchScienceInformationBinaryInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArchScienceInformationBinaryInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchScienceInformationBinaryInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchScienceInformationBinaryInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchScienceInformationBinaryInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchScienceInformationBinaryInput_args.class, metaDataMap);
    }

    public getArchScienceInformationBinaryInput_args() {
    }

    public getArchScienceInformationBinaryInput_args(
      String problem,
      BinaryInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchScienceInformationBinaryInput_args(getArchScienceInformationBinaryInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
    }

    public getArchScienceInformationBinaryInput_args deepCopy() {
      return new getArchScienceInformationBinaryInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getArchScienceInformationBinaryInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public getArchScienceInformationBinaryInput_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchScienceInformationBinaryInput_args)
        return this.equals((getArchScienceInformationBinaryInput_args)that);
      return false;
    }

    public boolean equals(getArchScienceInformationBinaryInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchScienceInformationBinaryInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchScienceInformationBinaryInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchScienceInformationBinaryInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationBinaryInput_argsStandardScheme getScheme() {
        return new getArchScienceInformationBinaryInput_argsStandardScheme();
      }
    }

    private static class getArchScienceInformationBinaryInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchScienceInformationBinaryInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchScienceInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchScienceInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchScienceInformationBinaryInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationBinaryInput_argsTupleScheme getScheme() {
        return new getArchScienceInformationBinaryInput_argsTupleScheme();
      }
    }

    private static class getArchScienceInformationBinaryInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchScienceInformationBinaryInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchScienceInformationBinaryInput_result implements org.apache.thrift.TBase<getArchScienceInformationBinaryInput_result, getArchScienceInformationBinaryInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArchScienceInformationBinaryInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchScienceInformationBinaryInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchScienceInformationBinaryInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchScienceInformationBinaryInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<SubscoreInformation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscoreInformation.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchScienceInformationBinaryInput_result.class, metaDataMap);
    }

    public getArchScienceInformationBinaryInput_result() {
    }

    public getArchScienceInformationBinaryInput_result(
      java.util.List<SubscoreInformation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchScienceInformationBinaryInput_result(getArchScienceInformationBinaryInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SubscoreInformation> __this__success = new java.util.ArrayList<SubscoreInformation>(other.success.size());
        for (SubscoreInformation other_element : other.success) {
          __this__success.add(new SubscoreInformation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArchScienceInformationBinaryInput_result deepCopy() {
      return new getArchScienceInformationBinaryInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SubscoreInformation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SubscoreInformation elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SubscoreInformation>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<SubscoreInformation> getSuccess() {
      return this.success;
    }

    public getArchScienceInformationBinaryInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<SubscoreInformation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SubscoreInformation>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchScienceInformationBinaryInput_result)
        return this.equals((getArchScienceInformationBinaryInput_result)that);
      return false;
    }

    public boolean equals(getArchScienceInformationBinaryInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchScienceInformationBinaryInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchScienceInformationBinaryInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchScienceInformationBinaryInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationBinaryInput_resultStandardScheme getScheme() {
        return new getArchScienceInformationBinaryInput_resultStandardScheme();
      }
    }

    private static class getArchScienceInformationBinaryInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchScienceInformationBinaryInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchScienceInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SubscoreInformation>(_list270.size);
                  @org.apache.thrift.annotation.Nullable SubscoreInformation _elem271;
                  for (int _i272 = 0; _i272 < _list270.size; ++_i272)
                  {
                    _elem271 = new SubscoreInformation();
                    _elem271.read(iprot);
                    struct.success.add(_elem271);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchScienceInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SubscoreInformation _iter273 : struct.success)
            {
              _iter273.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchScienceInformationBinaryInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationBinaryInput_resultTupleScheme getScheme() {
        return new getArchScienceInformationBinaryInput_resultTupleScheme();
      }
    }

    private static class getArchScienceInformationBinaryInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchScienceInformationBinaryInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SubscoreInformation _iter274 : struct.success)
            {
              _iter274.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list275 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SubscoreInformation>(_list275.size);
            @org.apache.thrift.annotation.Nullable SubscoreInformation _elem276;
            for (int _i277 = 0; _i277 < _list275.size; ++_i277)
            {
              _elem276 = new SubscoreInformation();
              _elem276.read(iprot);
              struct.success.add(_elem276);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchCostInformationBinaryInput_args implements org.apache.thrift.TBase<getArchCostInformationBinaryInput_args, getArchCostInformationBinaryInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArchCostInformationBinaryInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchCostInformationBinaryInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchCostInformationBinaryInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchCostInformationBinaryInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchCostInformationBinaryInput_args.class, metaDataMap);
    }

    public getArchCostInformationBinaryInput_args() {
    }

    public getArchCostInformationBinaryInput_args(
      String problem,
      BinaryInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchCostInformationBinaryInput_args(getArchCostInformationBinaryInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
    }

    public getArchCostInformationBinaryInput_args deepCopy() {
      return new getArchCostInformationBinaryInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getArchCostInformationBinaryInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public getArchCostInformationBinaryInput_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchCostInformationBinaryInput_args)
        return this.equals((getArchCostInformationBinaryInput_args)that);
      return false;
    }

    public boolean equals(getArchCostInformationBinaryInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchCostInformationBinaryInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchCostInformationBinaryInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchCostInformationBinaryInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationBinaryInput_argsStandardScheme getScheme() {
        return new getArchCostInformationBinaryInput_argsStandardScheme();
      }
    }

    private static class getArchCostInformationBinaryInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchCostInformationBinaryInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchCostInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchCostInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchCostInformationBinaryInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationBinaryInput_argsTupleScheme getScheme() {
        return new getArchCostInformationBinaryInput_argsTupleScheme();
      }
    }

    private static class getArchCostInformationBinaryInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchCostInformationBinaryInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchCostInformationBinaryInput_result implements org.apache.thrift.TBase<getArchCostInformationBinaryInput_result, getArchCostInformationBinaryInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArchCostInformationBinaryInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchCostInformationBinaryInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchCostInformationBinaryInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchCostInformationBinaryInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<MissionCostInformation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissionCostInformation.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchCostInformationBinaryInput_result.class, metaDataMap);
    }

    public getArchCostInformationBinaryInput_result() {
    }

    public getArchCostInformationBinaryInput_result(
      java.util.List<MissionCostInformation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchCostInformationBinaryInput_result(getArchCostInformationBinaryInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MissionCostInformation> __this__success = new java.util.ArrayList<MissionCostInformation>(other.success.size());
        for (MissionCostInformation other_element : other.success) {
          __this__success.add(new MissionCostInformation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArchCostInformationBinaryInput_result deepCopy() {
      return new getArchCostInformationBinaryInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MissionCostInformation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MissionCostInformation elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MissionCostInformation>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MissionCostInformation> getSuccess() {
      return this.success;
    }

    public getArchCostInformationBinaryInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<MissionCostInformation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MissionCostInformation>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchCostInformationBinaryInput_result)
        return this.equals((getArchCostInformationBinaryInput_result)that);
      return false;
    }

    public boolean equals(getArchCostInformationBinaryInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchCostInformationBinaryInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchCostInformationBinaryInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchCostInformationBinaryInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationBinaryInput_resultStandardScheme getScheme() {
        return new getArchCostInformationBinaryInput_resultStandardScheme();
      }
    }

    private static class getArchCostInformationBinaryInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchCostInformationBinaryInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchCostInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list278 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MissionCostInformation>(_list278.size);
                  @org.apache.thrift.annotation.Nullable MissionCostInformation _elem279;
                  for (int _i280 = 0; _i280 < _list278.size; ++_i280)
                  {
                    _elem279 = new MissionCostInformation();
                    _elem279.read(iprot);
                    struct.success.add(_elem279);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchCostInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MissionCostInformation _iter281 : struct.success)
            {
              _iter281.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchCostInformationBinaryInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationBinaryInput_resultTupleScheme getScheme() {
        return new getArchCostInformationBinaryInput_resultTupleScheme();
      }
    }

    private static class getArchCostInformationBinaryInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchCostInformationBinaryInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MissionCostInformation _iter282 : struct.success)
            {
              _iter282.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list283 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MissionCostInformation>(_list283.size);
            @org.apache.thrift.annotation.Nullable MissionCostInformation _elem284;
            for (int _i285 = 0; _i285 < _list283.size; ++_i285)
            {
              _elem284 = new MissionCostInformation();
              _elem284.read(iprot);
              struct.success.add(_elem284);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubscoreDetailsBinaryInput_args implements org.apache.thrift.TBase<getSubscoreDetailsBinaryInput_args, getSubscoreDetailsBinaryInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubscoreDetailsBinaryInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubscoreDetailsBinaryInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SUBOBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("subobj", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubscoreDetailsBinaryInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubscoreDetailsBinaryInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch; // required
    public @org.apache.thrift.annotation.Nullable String subobj; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch"),
      SUBOBJ((short)3, "subobj");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          case 3: // SUBOBJ
            return SUBOBJ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      tmpMap.put(_Fields.SUBOBJ, new org.apache.thrift.meta_data.FieldMetaData("subobj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubscoreDetailsBinaryInput_args.class, metaDataMap);
    }

    public getSubscoreDetailsBinaryInput_args() {
    }

    public getSubscoreDetailsBinaryInput_args(
      String problem,
      BinaryInputArchitecture arch,
      String subobj)
    {
      this();
      this.problem = problem;
      this.arch = arch;
      this.subobj = subobj;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubscoreDetailsBinaryInput_args(getSubscoreDetailsBinaryInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
      if (other.isSetSubobj()) {
        this.subobj = other.subobj;
      }
    }

    public getSubscoreDetailsBinaryInput_args deepCopy() {
      return new getSubscoreDetailsBinaryInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
      this.subobj = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getSubscoreDetailsBinaryInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public getSubscoreDetailsBinaryInput_args setArch(@org.apache.thrift.annotation.Nullable BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getSubobj() {
      return this.subobj;
    }

    public getSubscoreDetailsBinaryInput_args setSubobj(@org.apache.thrift.annotation.Nullable String subobj) {
      this.subobj = subobj;
      return this;
    }

    public void unsetSubobj() {
      this.subobj = null;
    }

    /** Returns true if field subobj is set (has been assigned a value) and false otherwise */
    public boolean isSetSubobj() {
      return this.subobj != null;
    }

    public void setSubobjIsSet(boolean value) {
      if (!value) {
        this.subobj = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      case SUBOBJ:
        if (value == null) {
          unsetSubobj();
        } else {
          setSubobj((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      case SUBOBJ:
        return getSubobj();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      case SUBOBJ:
        return isSetSubobj();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubscoreDetailsBinaryInput_args)
        return this.equals((getSubscoreDetailsBinaryInput_args)that);
      return false;
    }

    public boolean equals(getSubscoreDetailsBinaryInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      boolean this_present_subobj = true && this.isSetSubobj();
      boolean that_present_subobj = true && that.isSetSubobj();
      if (this_present_subobj || that_present_subobj) {
        if (!(this_present_subobj && that_present_subobj))
          return false;
        if (!this.subobj.equals(that.subobj))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubobj()) ? 131071 : 524287);
      if (isSetSubobj())
        hashCode = hashCode * 8191 + subobj.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubscoreDetailsBinaryInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubobj()).compareTo(other.isSetSubobj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubobj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subobj, other.subobj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubscoreDetailsBinaryInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subobj:");
      if (this.subobj == null) {
        sb.append("null");
      } else {
        sb.append(this.subobj);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubscoreDetailsBinaryInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsBinaryInput_argsStandardScheme getScheme() {
        return new getSubscoreDetailsBinaryInput_argsStandardScheme();
      }
    }

    private static class getSubscoreDetailsBinaryInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubscoreDetailsBinaryInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscoreDetailsBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SUBOBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subobj = iprot.readString();
                struct.setSubobjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscoreDetailsBinaryInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.subobj != null) {
          oprot.writeFieldBegin(SUBOBJ_FIELD_DESC);
          oprot.writeString(struct.subobj);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscoreDetailsBinaryInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsBinaryInput_argsTupleScheme getScheme() {
        return new getSubscoreDetailsBinaryInput_argsTupleScheme();
      }
    }

    private static class getSubscoreDetailsBinaryInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubscoreDetailsBinaryInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        if (struct.isSetSubobj()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
        if (struct.isSetSubobj()) {
          oprot.writeString(struct.subobj);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsBinaryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
        if (incoming.get(2)) {
          struct.subobj = iprot.readString();
          struct.setSubobjIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubscoreDetailsBinaryInput_result implements org.apache.thrift.TBase<getSubscoreDetailsBinaryInput_result, getSubscoreDetailsBinaryInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubscoreDetailsBinaryInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubscoreDetailsBinaryInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubscoreDetailsBinaryInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubscoreDetailsBinaryInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SubobjectiveDetails success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubobjectiveDetails.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubscoreDetailsBinaryInput_result.class, metaDataMap);
    }

    public getSubscoreDetailsBinaryInput_result() {
    }

    public getSubscoreDetailsBinaryInput_result(
      SubobjectiveDetails success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubscoreDetailsBinaryInput_result(getSubscoreDetailsBinaryInput_result other) {
      if (other.isSetSuccess()) {
        this.success = new SubobjectiveDetails(other.success);
      }
    }

    public getSubscoreDetailsBinaryInput_result deepCopy() {
      return new getSubscoreDetailsBinaryInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SubobjectiveDetails getSuccess() {
      return this.success;
    }

    public getSubscoreDetailsBinaryInput_result setSuccess(@org.apache.thrift.annotation.Nullable SubobjectiveDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SubobjectiveDetails)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubscoreDetailsBinaryInput_result)
        return this.equals((getSubscoreDetailsBinaryInput_result)that);
      return false;
    }

    public boolean equals(getSubscoreDetailsBinaryInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubscoreDetailsBinaryInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubscoreDetailsBinaryInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubscoreDetailsBinaryInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsBinaryInput_resultStandardScheme getScheme() {
        return new getSubscoreDetailsBinaryInput_resultStandardScheme();
      }
    }

    private static class getSubscoreDetailsBinaryInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubscoreDetailsBinaryInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscoreDetailsBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SubobjectiveDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscoreDetailsBinaryInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscoreDetailsBinaryInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsBinaryInput_resultTupleScheme getScheme() {
        return new getSubscoreDetailsBinaryInput_resultTupleScheme();
      }
    }

    private static class getSubscoreDetailsBinaryInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubscoreDetailsBinaryInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsBinaryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SubobjectiveDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchScienceInformationDiscreteInput_args implements org.apache.thrift.TBase<getArchScienceInformationDiscreteInput_args, getArchScienceInformationDiscreteInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArchScienceInformationDiscreteInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchScienceInformationDiscreteInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchScienceInformationDiscreteInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchScienceInformationDiscreteInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchScienceInformationDiscreteInput_args.class, metaDataMap);
    }

    public getArchScienceInformationDiscreteInput_args() {
    }

    public getArchScienceInformationDiscreteInput_args(
      String problem,
      DiscreteInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchScienceInformationDiscreteInput_args(getArchScienceInformationDiscreteInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new DiscreteInputArchitecture(other.arch);
      }
    }

    public getArchScienceInformationDiscreteInput_args deepCopy() {
      return new getArchScienceInformationDiscreteInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getArchScienceInformationDiscreteInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DiscreteInputArchitecture getArch() {
      return this.arch;
    }

    public getArchScienceInformationDiscreteInput_args setArch(@org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((DiscreteInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchScienceInformationDiscreteInput_args)
        return this.equals((getArchScienceInformationDiscreteInput_args)that);
      return false;
    }

    public boolean equals(getArchScienceInformationDiscreteInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchScienceInformationDiscreteInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchScienceInformationDiscreteInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchScienceInformationDiscreteInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationDiscreteInput_argsStandardScheme getScheme() {
        return new getArchScienceInformationDiscreteInput_argsStandardScheme();
      }
    }

    private static class getArchScienceInformationDiscreteInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchScienceInformationDiscreteInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchScienceInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new DiscreteInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchScienceInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchScienceInformationDiscreteInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationDiscreteInput_argsTupleScheme getScheme() {
        return new getArchScienceInformationDiscreteInput_argsTupleScheme();
      }
    }

    private static class getArchScienceInformationDiscreteInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchScienceInformationDiscreteInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new DiscreteInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchScienceInformationDiscreteInput_result implements org.apache.thrift.TBase<getArchScienceInformationDiscreteInput_result, getArchScienceInformationDiscreteInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArchScienceInformationDiscreteInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchScienceInformationDiscreteInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchScienceInformationDiscreteInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchScienceInformationDiscreteInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<SubscoreInformation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscoreInformation.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchScienceInformationDiscreteInput_result.class, metaDataMap);
    }

    public getArchScienceInformationDiscreteInput_result() {
    }

    public getArchScienceInformationDiscreteInput_result(
      java.util.List<SubscoreInformation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchScienceInformationDiscreteInput_result(getArchScienceInformationDiscreteInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SubscoreInformation> __this__success = new java.util.ArrayList<SubscoreInformation>(other.success.size());
        for (SubscoreInformation other_element : other.success) {
          __this__success.add(new SubscoreInformation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArchScienceInformationDiscreteInput_result deepCopy() {
      return new getArchScienceInformationDiscreteInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SubscoreInformation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SubscoreInformation elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SubscoreInformation>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<SubscoreInformation> getSuccess() {
      return this.success;
    }

    public getArchScienceInformationDiscreteInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<SubscoreInformation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SubscoreInformation>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchScienceInformationDiscreteInput_result)
        return this.equals((getArchScienceInformationDiscreteInput_result)that);
      return false;
    }

    public boolean equals(getArchScienceInformationDiscreteInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchScienceInformationDiscreteInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchScienceInformationDiscreteInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchScienceInformationDiscreteInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationDiscreteInput_resultStandardScheme getScheme() {
        return new getArchScienceInformationDiscreteInput_resultStandardScheme();
      }
    }

    private static class getArchScienceInformationDiscreteInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchScienceInformationDiscreteInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchScienceInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SubscoreInformation>(_list286.size);
                  @org.apache.thrift.annotation.Nullable SubscoreInformation _elem287;
                  for (int _i288 = 0; _i288 < _list286.size; ++_i288)
                  {
                    _elem287 = new SubscoreInformation();
                    _elem287.read(iprot);
                    struct.success.add(_elem287);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchScienceInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SubscoreInformation _iter289 : struct.success)
            {
              _iter289.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchScienceInformationDiscreteInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchScienceInformationDiscreteInput_resultTupleScheme getScheme() {
        return new getArchScienceInformationDiscreteInput_resultTupleScheme();
      }
    }

    private static class getArchScienceInformationDiscreteInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchScienceInformationDiscreteInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SubscoreInformation _iter290 : struct.success)
            {
              _iter290.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchScienceInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list291 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SubscoreInformation>(_list291.size);
            @org.apache.thrift.annotation.Nullable SubscoreInformation _elem292;
            for (int _i293 = 0; _i293 < _list291.size; ++_i293)
            {
              _elem292 = new SubscoreInformation();
              _elem292.read(iprot);
              struct.success.add(_elem292);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchCostInformationDiscreteInput_args implements org.apache.thrift.TBase<getArchCostInformationDiscreteInput_args, getArchCostInformationDiscreteInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArchCostInformationDiscreteInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchCostInformationDiscreteInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchCostInformationDiscreteInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchCostInformationDiscreteInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchCostInformationDiscreteInput_args.class, metaDataMap);
    }

    public getArchCostInformationDiscreteInput_args() {
    }

    public getArchCostInformationDiscreteInput_args(
      String problem,
      DiscreteInputArchitecture arch)
    {
      this();
      this.problem = problem;
      this.arch = arch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchCostInformationDiscreteInput_args(getArchCostInformationDiscreteInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new DiscreteInputArchitecture(other.arch);
      }
    }

    public getArchCostInformationDiscreteInput_args deepCopy() {
      return new getArchCostInformationDiscreteInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getArchCostInformationDiscreteInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DiscreteInputArchitecture getArch() {
      return this.arch;
    }

    public getArchCostInformationDiscreteInput_args setArch(@org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((DiscreteInputArchitecture)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchCostInformationDiscreteInput_args)
        return this.equals((getArchCostInformationDiscreteInput_args)that);
      return false;
    }

    public boolean equals(getArchCostInformationDiscreteInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchCostInformationDiscreteInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchCostInformationDiscreteInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchCostInformationDiscreteInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationDiscreteInput_argsStandardScheme getScheme() {
        return new getArchCostInformationDiscreteInput_argsStandardScheme();
      }
    }

    private static class getArchCostInformationDiscreteInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchCostInformationDiscreteInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchCostInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new DiscreteInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchCostInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchCostInformationDiscreteInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationDiscreteInput_argsTupleScheme getScheme() {
        return new getArchCostInformationDiscreteInput_argsTupleScheme();
      }
    }

    private static class getArchCostInformationDiscreteInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchCostInformationDiscreteInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new DiscreteInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getArchCostInformationDiscreteInput_result implements org.apache.thrift.TBase<getArchCostInformationDiscreteInput_result, getArchCostInformationDiscreteInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArchCostInformationDiscreteInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArchCostInformationDiscreteInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getArchCostInformationDiscreteInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getArchCostInformationDiscreteInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<MissionCostInformation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissionCostInformation.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArchCostInformationDiscreteInput_result.class, metaDataMap);
    }

    public getArchCostInformationDiscreteInput_result() {
    }

    public getArchCostInformationDiscreteInput_result(
      java.util.List<MissionCostInformation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArchCostInformationDiscreteInput_result(getArchCostInformationDiscreteInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MissionCostInformation> __this__success = new java.util.ArrayList<MissionCostInformation>(other.success.size());
        for (MissionCostInformation other_element : other.success) {
          __this__success.add(new MissionCostInformation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArchCostInformationDiscreteInput_result deepCopy() {
      return new getArchCostInformationDiscreteInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<MissionCostInformation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MissionCostInformation elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MissionCostInformation>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<MissionCostInformation> getSuccess() {
      return this.success;
    }

    public getArchCostInformationDiscreteInput_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<MissionCostInformation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MissionCostInformation>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArchCostInformationDiscreteInput_result)
        return this.equals((getArchCostInformationDiscreteInput_result)that);
      return false;
    }

    public boolean equals(getArchCostInformationDiscreteInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getArchCostInformationDiscreteInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArchCostInformationDiscreteInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArchCostInformationDiscreteInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationDiscreteInput_resultStandardScheme getScheme() {
        return new getArchCostInformationDiscreteInput_resultStandardScheme();
      }
    }

    private static class getArchCostInformationDiscreteInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getArchCostInformationDiscreteInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArchCostInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list294 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MissionCostInformation>(_list294.size);
                  @org.apache.thrift.annotation.Nullable MissionCostInformation _elem295;
                  for (int _i296 = 0; _i296 < _list294.size; ++_i296)
                  {
                    _elem295 = new MissionCostInformation();
                    _elem295.read(iprot);
                    struct.success.add(_elem295);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArchCostInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MissionCostInformation _iter297 : struct.success)
            {
              _iter297.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArchCostInformationDiscreteInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getArchCostInformationDiscreteInput_resultTupleScheme getScheme() {
        return new getArchCostInformationDiscreteInput_resultTupleScheme();
      }
    }

    private static class getArchCostInformationDiscreteInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getArchCostInformationDiscreteInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MissionCostInformation _iter298 : struct.success)
            {
              _iter298.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArchCostInformationDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list299 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MissionCostInformation>(_list299.size);
            @org.apache.thrift.annotation.Nullable MissionCostInformation _elem300;
            for (int _i301 = 0; _i301 < _list299.size; ++_i301)
            {
              _elem300 = new MissionCostInformation();
              _elem300.read(iprot);
              struct.success.add(_elem300);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubscoreDetailsDiscreteInput_args implements org.apache.thrift.TBase<getSubscoreDetailsDiscreteInput_args, getSubscoreDetailsDiscreteInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubscoreDetailsDiscreteInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubscoreDetailsDiscreteInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SUBOBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("subobj", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubscoreDetailsDiscreteInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubscoreDetailsDiscreteInput_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String problem; // required
    public @org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch; // required
    public @org.apache.thrift.annotation.Nullable String subobj; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch"),
      SUBOBJ((short)3, "subobj");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          case 3: // SUBOBJ
            return SUBOBJ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class)));
      tmpMap.put(_Fields.SUBOBJ, new org.apache.thrift.meta_data.FieldMetaData("subobj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubscoreDetailsDiscreteInput_args.class, metaDataMap);
    }

    public getSubscoreDetailsDiscreteInput_args() {
    }

    public getSubscoreDetailsDiscreteInput_args(
      String problem,
      DiscreteInputArchitecture arch,
      String subobj)
    {
      this();
      this.problem = problem;
      this.arch = arch;
      this.subobj = subobj;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubscoreDetailsDiscreteInput_args(getSubscoreDetailsDiscreteInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new DiscreteInputArchitecture(other.arch);
      }
      if (other.isSetSubobj()) {
        this.subobj = other.subobj;
      }
    }

    public getSubscoreDetailsDiscreteInput_args deepCopy() {
      return new getSubscoreDetailsDiscreteInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
      this.subobj = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getProblem() {
      return this.problem;
    }

    public getSubscoreDetailsDiscreteInput_args setProblem(@org.apache.thrift.annotation.Nullable String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DiscreteInputArchitecture getArch() {
      return this.arch;
    }

    public getSubscoreDetailsDiscreteInput_args setArch(@org.apache.thrift.annotation.Nullable DiscreteInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getSubobj() {
      return this.subobj;
    }

    public getSubscoreDetailsDiscreteInput_args setSubobj(@org.apache.thrift.annotation.Nullable String subobj) {
      this.subobj = subobj;
      return this;
    }

    public void unsetSubobj() {
      this.subobj = null;
    }

    /** Returns true if field subobj is set (has been assigned a value) and false otherwise */
    public boolean isSetSubobj() {
      return this.subobj != null;
    }

    public void setSubobjIsSet(boolean value) {
      if (!value) {
        this.subobj = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((DiscreteInputArchitecture)value);
        }
        break;

      case SUBOBJ:
        if (value == null) {
          unsetSubobj();
        } else {
          setSubobj((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      case SUBOBJ:
        return getSubobj();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      case SUBOBJ:
        return isSetSubobj();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubscoreDetailsDiscreteInput_args)
        return this.equals((getSubscoreDetailsDiscreteInput_args)that);
      return false;
    }

    public boolean equals(getSubscoreDetailsDiscreteInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      boolean this_present_subobj = true && this.isSetSubobj();
      boolean that_present_subobj = true && that.isSetSubobj();
      if (this_present_subobj || that_present_subobj) {
        if (!(this_present_subobj && that_present_subobj))
          return false;
        if (!this.subobj.equals(that.subobj))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      hashCode = hashCode * 8191 + ((isSetSubobj()) ? 131071 : 524287);
      if (isSetSubobj())
        hashCode = hashCode * 8191 + subobj.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubscoreDetailsDiscreteInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubobj()).compareTo(other.isSetSubobj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubobj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subobj, other.subobj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubscoreDetailsDiscreteInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subobj:");
      if (this.subobj == null) {
        sb.append("null");
      } else {
        sb.append(this.subobj);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubscoreDetailsDiscreteInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsDiscreteInput_argsStandardScheme getScheme() {
        return new getSubscoreDetailsDiscreteInput_argsStandardScheme();
      }
    }

    private static class getSubscoreDetailsDiscreteInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubscoreDetailsDiscreteInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscoreDetailsDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new DiscreteInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SUBOBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subobj = iprot.readString();
                struct.setSubobjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscoreDetailsDiscreteInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.subobj != null) {
          oprot.writeFieldBegin(SUBOBJ_FIELD_DESC);
          oprot.writeString(struct.subobj);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscoreDetailsDiscreteInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsDiscreteInput_argsTupleScheme getScheme() {
        return new getSubscoreDetailsDiscreteInput_argsTupleScheme();
      }
    }

    private static class getSubscoreDetailsDiscreteInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubscoreDetailsDiscreteInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        if (struct.isSetSubobj()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
        if (struct.isSetSubobj()) {
          oprot.writeString(struct.subobj);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsDiscreteInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new DiscreteInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
        if (incoming.get(2)) {
          struct.subobj = iprot.readString();
          struct.setSubobjIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubscoreDetailsDiscreteInput_result implements org.apache.thrift.TBase<getSubscoreDetailsDiscreteInput_result, getSubscoreDetailsDiscreteInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubscoreDetailsDiscreteInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubscoreDetailsDiscreteInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubscoreDetailsDiscreteInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubscoreDetailsDiscreteInput_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SubobjectiveDetails success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubobjectiveDetails.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubscoreDetailsDiscreteInput_result.class, metaDataMap);
    }

    public getSubscoreDetailsDiscreteInput_result() {
    }

    public getSubscoreDetailsDiscreteInput_result(
      SubobjectiveDetails success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubscoreDetailsDiscreteInput_result(getSubscoreDetailsDiscreteInput_result other) {
      if (other.isSetSuccess()) {
        this.success = new SubobjectiveDetails(other.success);
      }
    }

    public getSubscoreDetailsDiscreteInput_result deepCopy() {
      return new getSubscoreDetailsDiscreteInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SubobjectiveDetails getSuccess() {
      return this.success;
    }

    public getSubscoreDetailsDiscreteInput_result setSuccess(@org.apache.thrift.annotation.Nullable SubobjectiveDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SubobjectiveDetails)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubscoreDetailsDiscreteInput_result)
        return this.equals((getSubscoreDetailsDiscreteInput_result)that);
      return false;
    }

    public boolean equals(getSubscoreDetailsDiscreteInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubscoreDetailsDiscreteInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubscoreDetailsDiscreteInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubscoreDetailsDiscreteInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsDiscreteInput_resultStandardScheme getScheme() {
        return new getSubscoreDetailsDiscreteInput_resultStandardScheme();
      }
    }

    private static class getSubscoreDetailsDiscreteInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubscoreDetailsDiscreteInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubscoreDetailsDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SubobjectiveDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubscoreDetailsDiscreteInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubscoreDetailsDiscreteInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubscoreDetailsDiscreteInput_resultTupleScheme getScheme() {
        return new getSubscoreDetailsDiscreteInput_resultTupleScheme();
      }
    }

    private static class getSubscoreDetailsDiscreteInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubscoreDetailsDiscreteInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubscoreDetailsDiscreteInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SubobjectiveDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
