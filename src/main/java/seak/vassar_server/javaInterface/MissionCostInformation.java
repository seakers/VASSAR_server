/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package seak.vassar_server.javaInterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-08")
public class MissionCostInformation implements org.apache.thrift.TBase<MissionCostInformation, MissionCostInformation._Fields>, java.io.Serializable, Cloneable, Comparable<MissionCostInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MissionCostInformation");

  private static final org.apache.thrift.protocol.TField ORBIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orbit_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LAUNCH_VEHICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("launch_vehicle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_MASS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_mass", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_POWER_FIELD_DESC = new org.apache.thrift.protocol.TField("total_power", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("total_cost", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MASS_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("mass_budget", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField POWER_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("power_budget", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField COST_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("cost_budget", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MissionCostInformationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MissionCostInformationTupleSchemeFactory();

  public String orbit_name; // required
  public java.util.List<String> payload; // required
  public String launch_vehicle; // required
  public double total_mass; // required
  public double total_power; // required
  public double total_cost; // required
  public java.util.Map<String, Double> mass_budget; // required
  public java.util.Map<String, Double> power_budget; // required
  public java.util.Map<String, Double> cost_budget; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORBIT_NAME((short)1, "orbit_name"),
    PAYLOAD((short)2, "payload"),
    LAUNCH_VEHICLE((short)3, "launch_vehicle"),
    TOTAL_MASS((short)4, "total_mass"),
    TOTAL_POWER((short)5, "total_power"),
    TOTAL_COST((short)6, "total_cost"),
    MASS_BUDGET((short)7, "mass_budget"),
    POWER_BUDGET((short)8, "power_budget"),
    COST_BUDGET((short)9, "cost_budget");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORBIT_NAME
          return ORBIT_NAME;
        case 2: // PAYLOAD
          return PAYLOAD;
        case 3: // LAUNCH_VEHICLE
          return LAUNCH_VEHICLE;
        case 4: // TOTAL_MASS
          return TOTAL_MASS;
        case 5: // TOTAL_POWER
          return TOTAL_POWER;
        case 6: // TOTAL_COST
          return TOTAL_COST;
        case 7: // MASS_BUDGET
          return MASS_BUDGET;
        case 8: // POWER_BUDGET
          return POWER_BUDGET;
        case 9: // COST_BUDGET
          return COST_BUDGET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_MASS_ISSET_ID = 0;
  private static final int __TOTAL_POWER_ISSET_ID = 1;
  private static final int __TOTAL_COST_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORBIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("orbit_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAUNCH_VEHICLE, new org.apache.thrift.meta_data.FieldMetaData("launch_vehicle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_MASS, new org.apache.thrift.meta_data.FieldMetaData("total_mass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_POWER, new org.apache.thrift.meta_data.FieldMetaData("total_power", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_COST, new org.apache.thrift.meta_data.FieldMetaData("total_cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MASS_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("mass_budget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.POWER_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("power_budget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.COST_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("cost_budget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MissionCostInformation.class, metaDataMap);
  }

  public MissionCostInformation() {
  }

  public MissionCostInformation(
    String orbit_name,
    java.util.List<String> payload,
    String launch_vehicle,
    double total_mass,
    double total_power,
    double total_cost,
    java.util.Map<String, Double> mass_budget,
    java.util.Map<String, Double> power_budget,
    java.util.Map<String, Double> cost_budget)
  {
    this();
    this.orbit_name = orbit_name;
    this.payload = payload;
    this.launch_vehicle = launch_vehicle;
    this.total_mass = total_mass;
    setTotal_massIsSet(true);
    this.total_power = total_power;
    setTotal_powerIsSet(true);
    this.total_cost = total_cost;
    setTotal_costIsSet(true);
    this.mass_budget = mass_budget;
    this.power_budget = power_budget;
    this.cost_budget = cost_budget;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MissionCostInformation(MissionCostInformation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrbit_name()) {
      this.orbit_name = other.orbit_name;
    }
    if (other.isSetPayload()) {
      java.util.List<String> __this__payload = new java.util.ArrayList<String>(other.payload);
      this.payload = __this__payload;
    }
    if (other.isSetLaunch_vehicle()) {
      this.launch_vehicle = other.launch_vehicle;
    }
    this.total_mass = other.total_mass;
    this.total_power = other.total_power;
    this.total_cost = other.total_cost;
    if (other.isSetMass_budget()) {
      java.util.Map<String, Double> __this__mass_budget = new java.util.HashMap<String, Double>(other.mass_budget);
      this.mass_budget = __this__mass_budget;
    }
    if (other.isSetPower_budget()) {
      java.util.Map<String, Double> __this__power_budget = new java.util.HashMap<String, Double>(other.power_budget);
      this.power_budget = __this__power_budget;
    }
    if (other.isSetCost_budget()) {
      java.util.Map<String, Double> __this__cost_budget = new java.util.HashMap<String, Double>(other.cost_budget);
      this.cost_budget = __this__cost_budget;
    }
  }

  public MissionCostInformation deepCopy() {
    return new MissionCostInformation(this);
  }

  @Override
  public void clear() {
    this.orbit_name = null;
    this.payload = null;
    this.launch_vehicle = null;
    setTotal_massIsSet(false);
    this.total_mass = 0.0;
    setTotal_powerIsSet(false);
    this.total_power = 0.0;
    setTotal_costIsSet(false);
    this.total_cost = 0.0;
    this.mass_budget = null;
    this.power_budget = null;
    this.cost_budget = null;
  }

  public String getOrbit_name() {
    return this.orbit_name;
  }

  public MissionCostInformation setOrbit_name(String orbit_name) {
    this.orbit_name = orbit_name;
    return this;
  }

  public void unsetOrbit_name() {
    this.orbit_name = null;
  }

  /** Returns true if field orbit_name is set (has been assigned a value) and false otherwise */
  public boolean isSetOrbit_name() {
    return this.orbit_name != null;
  }

  public void setOrbit_nameIsSet(boolean value) {
    if (!value) {
      this.orbit_name = null;
    }
  }

  public int getPayloadSize() {
    return (this.payload == null) ? 0 : this.payload.size();
  }

  public java.util.Iterator<String> getPayloadIterator() {
    return (this.payload == null) ? null : this.payload.iterator();
  }

  public void addToPayload(String elem) {
    if (this.payload == null) {
      this.payload = new java.util.ArrayList<String>();
    }
    this.payload.add(elem);
  }

  public java.util.List<String> getPayload() {
    return this.payload;
  }

  public MissionCostInformation setPayload(java.util.List<String> payload) {
    this.payload = payload;
    return this;
  }

  public void unsetPayload() {
    this.payload = null;
  }

  /** Returns true if field payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.payload = null;
    }
  }

  public String getLaunch_vehicle() {
    return this.launch_vehicle;
  }

  public MissionCostInformation setLaunch_vehicle(String launch_vehicle) {
    this.launch_vehicle = launch_vehicle;
    return this;
  }

  public void unsetLaunch_vehicle() {
    this.launch_vehicle = null;
  }

  /** Returns true if field launch_vehicle is set (has been assigned a value) and false otherwise */
  public boolean isSetLaunch_vehicle() {
    return this.launch_vehicle != null;
  }

  public void setLaunch_vehicleIsSet(boolean value) {
    if (!value) {
      this.launch_vehicle = null;
    }
  }

  public double getTotal_mass() {
    return this.total_mass;
  }

  public MissionCostInformation setTotal_mass(double total_mass) {
    this.total_mass = total_mass;
    setTotal_massIsSet(true);
    return this;
  }

  public void unsetTotal_mass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_MASS_ISSET_ID);
  }

  /** Returns true if field total_mass is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_mass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_MASS_ISSET_ID);
  }

  public void setTotal_massIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_MASS_ISSET_ID, value);
  }

  public double getTotal_power() {
    return this.total_power;
  }

  public MissionCostInformation setTotal_power(double total_power) {
    this.total_power = total_power;
    setTotal_powerIsSet(true);
    return this;
  }

  public void unsetTotal_power() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_POWER_ISSET_ID);
  }

  /** Returns true if field total_power is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_power() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_POWER_ISSET_ID);
  }

  public void setTotal_powerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_POWER_ISSET_ID, value);
  }

  public double getTotal_cost() {
    return this.total_cost;
  }

  public MissionCostInformation setTotal_cost(double total_cost) {
    this.total_cost = total_cost;
    setTotal_costIsSet(true);
    return this;
  }

  public void unsetTotal_cost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_COST_ISSET_ID);
  }

  /** Returns true if field total_cost is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_cost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_COST_ISSET_ID);
  }

  public void setTotal_costIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_COST_ISSET_ID, value);
  }

  public int getMass_budgetSize() {
    return (this.mass_budget == null) ? 0 : this.mass_budget.size();
  }

  public void putToMass_budget(String key, double val) {
    if (this.mass_budget == null) {
      this.mass_budget = new java.util.HashMap<String, Double>();
    }
    this.mass_budget.put(key, val);
  }

  public java.util.Map<String, Double> getMass_budget() {
    return this.mass_budget;
  }

  public MissionCostInformation setMass_budget(java.util.Map<String, Double> mass_budget) {
    this.mass_budget = mass_budget;
    return this;
  }

  public void unsetMass_budget() {
    this.mass_budget = null;
  }

  /** Returns true if field mass_budget is set (has been assigned a value) and false otherwise */
  public boolean isSetMass_budget() {
    return this.mass_budget != null;
  }

  public void setMass_budgetIsSet(boolean value) {
    if (!value) {
      this.mass_budget = null;
    }
  }

  public int getPower_budgetSize() {
    return (this.power_budget == null) ? 0 : this.power_budget.size();
  }

  public void putToPower_budget(String key, double val) {
    if (this.power_budget == null) {
      this.power_budget = new java.util.HashMap<String, Double>();
    }
    this.power_budget.put(key, val);
  }

  public java.util.Map<String, Double> getPower_budget() {
    return this.power_budget;
  }

  public MissionCostInformation setPower_budget(java.util.Map<String, Double> power_budget) {
    this.power_budget = power_budget;
    return this;
  }

  public void unsetPower_budget() {
    this.power_budget = null;
  }

  /** Returns true if field power_budget is set (has been assigned a value) and false otherwise */
  public boolean isSetPower_budget() {
    return this.power_budget != null;
  }

  public void setPower_budgetIsSet(boolean value) {
    if (!value) {
      this.power_budget = null;
    }
  }

  public int getCost_budgetSize() {
    return (this.cost_budget == null) ? 0 : this.cost_budget.size();
  }

  public void putToCost_budget(String key, double val) {
    if (this.cost_budget == null) {
      this.cost_budget = new java.util.HashMap<String, Double>();
    }
    this.cost_budget.put(key, val);
  }

  public java.util.Map<String, Double> getCost_budget() {
    return this.cost_budget;
  }

  public MissionCostInformation setCost_budget(java.util.Map<String, Double> cost_budget) {
    this.cost_budget = cost_budget;
    return this;
  }

  public void unsetCost_budget() {
    this.cost_budget = null;
  }

  /** Returns true if field cost_budget is set (has been assigned a value) and false otherwise */
  public boolean isSetCost_budget() {
    return this.cost_budget != null;
  }

  public void setCost_budgetIsSet(boolean value) {
    if (!value) {
      this.cost_budget = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORBIT_NAME:
      if (value == null) {
        unsetOrbit_name();
      } else {
        setOrbit_name((String)value);
      }
      break;

    case PAYLOAD:
      if (value == null) {
        unsetPayload();
      } else {
        setPayload((java.util.List<String>)value);
      }
      break;

    case LAUNCH_VEHICLE:
      if (value == null) {
        unsetLaunch_vehicle();
      } else {
        setLaunch_vehicle((String)value);
      }
      break;

    case TOTAL_MASS:
      if (value == null) {
        unsetTotal_mass();
      } else {
        setTotal_mass((Double)value);
      }
      break;

    case TOTAL_POWER:
      if (value == null) {
        unsetTotal_power();
      } else {
        setTotal_power((Double)value);
      }
      break;

    case TOTAL_COST:
      if (value == null) {
        unsetTotal_cost();
      } else {
        setTotal_cost((Double)value);
      }
      break;

    case MASS_BUDGET:
      if (value == null) {
        unsetMass_budget();
      } else {
        setMass_budget((java.util.Map<String, Double>)value);
      }
      break;

    case POWER_BUDGET:
      if (value == null) {
        unsetPower_budget();
      } else {
        setPower_budget((java.util.Map<String, Double>)value);
      }
      break;

    case COST_BUDGET:
      if (value == null) {
        unsetCost_budget();
      } else {
        setCost_budget((java.util.Map<String, Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORBIT_NAME:
      return getOrbit_name();

    case PAYLOAD:
      return getPayload();

    case LAUNCH_VEHICLE:
      return getLaunch_vehicle();

    case TOTAL_MASS:
      return getTotal_mass();

    case TOTAL_POWER:
      return getTotal_power();

    case TOTAL_COST:
      return getTotal_cost();

    case MASS_BUDGET:
      return getMass_budget();

    case POWER_BUDGET:
      return getPower_budget();

    case COST_BUDGET:
      return getCost_budget();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORBIT_NAME:
      return isSetOrbit_name();
    case PAYLOAD:
      return isSetPayload();
    case LAUNCH_VEHICLE:
      return isSetLaunch_vehicle();
    case TOTAL_MASS:
      return isSetTotal_mass();
    case TOTAL_POWER:
      return isSetTotal_power();
    case TOTAL_COST:
      return isSetTotal_cost();
    case MASS_BUDGET:
      return isSetMass_budget();
    case POWER_BUDGET:
      return isSetPower_budget();
    case COST_BUDGET:
      return isSetCost_budget();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MissionCostInformation)
      return this.equals((MissionCostInformation)that);
    return false;
  }

  public boolean equals(MissionCostInformation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orbit_name = true && this.isSetOrbit_name();
    boolean that_present_orbit_name = true && that.isSetOrbit_name();
    if (this_present_orbit_name || that_present_orbit_name) {
      if (!(this_present_orbit_name && that_present_orbit_name))
        return false;
      if (!this.orbit_name.equals(that.orbit_name))
        return false;
    }

    boolean this_present_payload = true && this.isSetPayload();
    boolean that_present_payload = true && that.isSetPayload();
    if (this_present_payload || that_present_payload) {
      if (!(this_present_payload && that_present_payload))
        return false;
      if (!this.payload.equals(that.payload))
        return false;
    }

    boolean this_present_launch_vehicle = true && this.isSetLaunch_vehicle();
    boolean that_present_launch_vehicle = true && that.isSetLaunch_vehicle();
    if (this_present_launch_vehicle || that_present_launch_vehicle) {
      if (!(this_present_launch_vehicle && that_present_launch_vehicle))
        return false;
      if (!this.launch_vehicle.equals(that.launch_vehicle))
        return false;
    }

    boolean this_present_total_mass = true;
    boolean that_present_total_mass = true;
    if (this_present_total_mass || that_present_total_mass) {
      if (!(this_present_total_mass && that_present_total_mass))
        return false;
      if (this.total_mass != that.total_mass)
        return false;
    }

    boolean this_present_total_power = true;
    boolean that_present_total_power = true;
    if (this_present_total_power || that_present_total_power) {
      if (!(this_present_total_power && that_present_total_power))
        return false;
      if (this.total_power != that.total_power)
        return false;
    }

    boolean this_present_total_cost = true;
    boolean that_present_total_cost = true;
    if (this_present_total_cost || that_present_total_cost) {
      if (!(this_present_total_cost && that_present_total_cost))
        return false;
      if (this.total_cost != that.total_cost)
        return false;
    }

    boolean this_present_mass_budget = true && this.isSetMass_budget();
    boolean that_present_mass_budget = true && that.isSetMass_budget();
    if (this_present_mass_budget || that_present_mass_budget) {
      if (!(this_present_mass_budget && that_present_mass_budget))
        return false;
      if (!this.mass_budget.equals(that.mass_budget))
        return false;
    }

    boolean this_present_power_budget = true && this.isSetPower_budget();
    boolean that_present_power_budget = true && that.isSetPower_budget();
    if (this_present_power_budget || that_present_power_budget) {
      if (!(this_present_power_budget && that_present_power_budget))
        return false;
      if (!this.power_budget.equals(that.power_budget))
        return false;
    }

    boolean this_present_cost_budget = true && this.isSetCost_budget();
    boolean that_present_cost_budget = true && that.isSetCost_budget();
    if (this_present_cost_budget || that_present_cost_budget) {
      if (!(this_present_cost_budget && that_present_cost_budget))
        return false;
      if (!this.cost_budget.equals(that.cost_budget))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrbit_name()) ? 131071 : 524287);
    if (isSetOrbit_name())
      hashCode = hashCode * 8191 + orbit_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
    if (isSetPayload())
      hashCode = hashCode * 8191 + payload.hashCode();

    hashCode = hashCode * 8191 + ((isSetLaunch_vehicle()) ? 131071 : 524287);
    if (isSetLaunch_vehicle())
      hashCode = hashCode * 8191 + launch_vehicle.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_mass);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_power);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_cost);

    hashCode = hashCode * 8191 + ((isSetMass_budget()) ? 131071 : 524287);
    if (isSetMass_budget())
      hashCode = hashCode * 8191 + mass_budget.hashCode();

    hashCode = hashCode * 8191 + ((isSetPower_budget()) ? 131071 : 524287);
    if (isSetPower_budget())
      hashCode = hashCode * 8191 + power_budget.hashCode();

    hashCode = hashCode * 8191 + ((isSetCost_budget()) ? 131071 : 524287);
    if (isSetCost_budget())
      hashCode = hashCode * 8191 + cost_budget.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MissionCostInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrbit_name()).compareTo(other.isSetOrbit_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrbit_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orbit_name, other.orbit_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLaunch_vehicle()).compareTo(other.isSetLaunch_vehicle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLaunch_vehicle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.launch_vehicle, other.launch_vehicle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_mass()).compareTo(other.isSetTotal_mass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_mass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_mass, other.total_mass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_power()).compareTo(other.isSetTotal_power());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_power()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_power, other.total_power);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_cost()).compareTo(other.isSetTotal_cost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_cost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_cost, other.total_cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMass_budget()).compareTo(other.isSetMass_budget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMass_budget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mass_budget, other.mass_budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPower_budget()).compareTo(other.isSetPower_budget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPower_budget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.power_budget, other.power_budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost_budget()).compareTo(other.isSetCost_budget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost_budget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost_budget, other.cost_budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MissionCostInformation(");
    boolean first = true;

    sb.append("orbit_name:");
    if (this.orbit_name == null) {
      sb.append("null");
    } else {
      sb.append(this.orbit_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payload:");
    if (this.payload == null) {
      sb.append("null");
    } else {
      sb.append(this.payload);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("launch_vehicle:");
    if (this.launch_vehicle == null) {
      sb.append("null");
    } else {
      sb.append(this.launch_vehicle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_mass:");
    sb.append(this.total_mass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_power:");
    sb.append(this.total_power);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_cost:");
    sb.append(this.total_cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mass_budget:");
    if (this.mass_budget == null) {
      sb.append("null");
    } else {
      sb.append(this.mass_budget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("power_budget:");
    if (this.power_budget == null) {
      sb.append("null");
    } else {
      sb.append(this.power_budget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost_budget:");
    if (this.cost_budget == null) {
      sb.append("null");
    } else {
      sb.append(this.cost_budget);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MissionCostInformationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MissionCostInformationStandardScheme getScheme() {
      return new MissionCostInformationStandardScheme();
    }
  }

  private static class MissionCostInformationStandardScheme extends org.apache.thrift.scheme.StandardScheme<MissionCostInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MissionCostInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORBIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orbit_name = iprot.readString();
              struct.setOrbit_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.payload = new java.util.ArrayList<String>(_list40.size);
                String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.payload.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAUNCH_VEHICLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.launch_vehicle = iprot.readString();
              struct.setLaunch_vehicleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_MASS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_mass = iprot.readDouble();
              struct.setTotal_massIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_POWER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_power = iprot.readDouble();
              struct.setTotal_powerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_cost = iprot.readDouble();
              struct.setTotal_costIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MASS_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map43 = iprot.readMapBegin();
                struct.mass_budget = new java.util.HashMap<String, Double>(2*_map43.size);
                String _key44;
                double _val45;
                for (int _i46 = 0; _i46 < _map43.size; ++_i46)
                {
                  _key44 = iprot.readString();
                  _val45 = iprot.readDouble();
                  struct.mass_budget.put(_key44, _val45);
                }
                iprot.readMapEnd();
              }
              struct.setMass_budgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POWER_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
                struct.power_budget = new java.util.HashMap<String, Double>(2*_map47.size);
                String _key48;
                double _val49;
                for (int _i50 = 0; _i50 < _map47.size; ++_i50)
                {
                  _key48 = iprot.readString();
                  _val49 = iprot.readDouble();
                  struct.power_budget.put(_key48, _val49);
                }
                iprot.readMapEnd();
              }
              struct.setPower_budgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COST_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
                struct.cost_budget = new java.util.HashMap<String, Double>(2*_map51.size);
                String _key52;
                double _val53;
                for (int _i54 = 0; _i54 < _map51.size; ++_i54)
                {
                  _key52 = iprot.readString();
                  _val53 = iprot.readDouble();
                  struct.cost_budget.put(_key52, _val53);
                }
                iprot.readMapEnd();
              }
              struct.setCost_budgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MissionCostInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orbit_name != null) {
        oprot.writeFieldBegin(ORBIT_NAME_FIELD_DESC);
        oprot.writeString(struct.orbit_name);
        oprot.writeFieldEnd();
      }
      if (struct.payload != null) {
        oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.payload.size()));
          for (String _iter55 : struct.payload)
          {
            oprot.writeString(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.launch_vehicle != null) {
        oprot.writeFieldBegin(LAUNCH_VEHICLE_FIELD_DESC);
        oprot.writeString(struct.launch_vehicle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_MASS_FIELD_DESC);
      oprot.writeDouble(struct.total_mass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POWER_FIELD_DESC);
      oprot.writeDouble(struct.total_power);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COST_FIELD_DESC);
      oprot.writeDouble(struct.total_cost);
      oprot.writeFieldEnd();
      if (struct.mass_budget != null) {
        oprot.writeFieldBegin(MASS_BUDGET_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.mass_budget.size()));
          for (java.util.Map.Entry<String, Double> _iter56 : struct.mass_budget.entrySet())
          {
            oprot.writeString(_iter56.getKey());
            oprot.writeDouble(_iter56.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.power_budget != null) {
        oprot.writeFieldBegin(POWER_BUDGET_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.power_budget.size()));
          for (java.util.Map.Entry<String, Double> _iter57 : struct.power_budget.entrySet())
          {
            oprot.writeString(_iter57.getKey());
            oprot.writeDouble(_iter57.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cost_budget != null) {
        oprot.writeFieldBegin(COST_BUDGET_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.cost_budget.size()));
          for (java.util.Map.Entry<String, Double> _iter58 : struct.cost_budget.entrySet())
          {
            oprot.writeString(_iter58.getKey());
            oprot.writeDouble(_iter58.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MissionCostInformationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MissionCostInformationTupleScheme getScheme() {
      return new MissionCostInformationTupleScheme();
    }
  }

  private static class MissionCostInformationTupleScheme extends org.apache.thrift.scheme.TupleScheme<MissionCostInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MissionCostInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrbit_name()) {
        optionals.set(0);
      }
      if (struct.isSetPayload()) {
        optionals.set(1);
      }
      if (struct.isSetLaunch_vehicle()) {
        optionals.set(2);
      }
      if (struct.isSetTotal_mass()) {
        optionals.set(3);
      }
      if (struct.isSetTotal_power()) {
        optionals.set(4);
      }
      if (struct.isSetTotal_cost()) {
        optionals.set(5);
      }
      if (struct.isSetMass_budget()) {
        optionals.set(6);
      }
      if (struct.isSetPower_budget()) {
        optionals.set(7);
      }
      if (struct.isSetCost_budget()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOrbit_name()) {
        oprot.writeString(struct.orbit_name);
      }
      if (struct.isSetPayload()) {
        {
          oprot.writeI32(struct.payload.size());
          for (String _iter59 : struct.payload)
          {
            oprot.writeString(_iter59);
          }
        }
      }
      if (struct.isSetLaunch_vehicle()) {
        oprot.writeString(struct.launch_vehicle);
      }
      if (struct.isSetTotal_mass()) {
        oprot.writeDouble(struct.total_mass);
      }
      if (struct.isSetTotal_power()) {
        oprot.writeDouble(struct.total_power);
      }
      if (struct.isSetTotal_cost()) {
        oprot.writeDouble(struct.total_cost);
      }
      if (struct.isSetMass_budget()) {
        {
          oprot.writeI32(struct.mass_budget.size());
          for (java.util.Map.Entry<String, Double> _iter60 : struct.mass_budget.entrySet())
          {
            oprot.writeString(_iter60.getKey());
            oprot.writeDouble(_iter60.getValue());
          }
        }
      }
      if (struct.isSetPower_budget()) {
        {
          oprot.writeI32(struct.power_budget.size());
          for (java.util.Map.Entry<String, Double> _iter61 : struct.power_budget.entrySet())
          {
            oprot.writeString(_iter61.getKey());
            oprot.writeDouble(_iter61.getValue());
          }
        }
      }
      if (struct.isSetCost_budget()) {
        {
          oprot.writeI32(struct.cost_budget.size());
          for (java.util.Map.Entry<String, Double> _iter62 : struct.cost_budget.entrySet())
          {
            oprot.writeString(_iter62.getKey());
            oprot.writeDouble(_iter62.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MissionCostInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.orbit_name = iprot.readString();
        struct.setOrbit_nameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.payload = new java.util.ArrayList<String>(_list63.size);
          String _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = iprot.readString();
            struct.payload.add(_elem64);
          }
        }
        struct.setPayloadIsSet(true);
      }
      if (incoming.get(2)) {
        struct.launch_vehicle = iprot.readString();
        struct.setLaunch_vehicleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.total_mass = iprot.readDouble();
        struct.setTotal_massIsSet(true);
      }
      if (incoming.get(4)) {
        struct.total_power = iprot.readDouble();
        struct.setTotal_powerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.total_cost = iprot.readDouble();
        struct.setTotal_costIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.mass_budget = new java.util.HashMap<String, Double>(2*_map66.size);
          String _key67;
          double _val68;
          for (int _i69 = 0; _i69 < _map66.size; ++_i69)
          {
            _key67 = iprot.readString();
            _val68 = iprot.readDouble();
            struct.mass_budget.put(_key67, _val68);
          }
        }
        struct.setMass_budgetIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.power_budget = new java.util.HashMap<String, Double>(2*_map70.size);
          String _key71;
          double _val72;
          for (int _i73 = 0; _i73 < _map70.size; ++_i73)
          {
            _key71 = iprot.readString();
            _val72 = iprot.readDouble();
            struct.power_budget.put(_key71, _val72);
          }
        }
        struct.setPower_budgetIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.cost_budget = new java.util.HashMap<String, Double>(2*_map74.size);
          String _key75;
          double _val76;
          for (int _i77 = 0; _i77 < _map74.size; ++_i77)
          {
            _key75 = iprot.readString();
            _val76 = iprot.readDouble();
            struct.cost_budget.put(_key75, _val76);
          }
        }
        struct.setCost_budgetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

